
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002504  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002610  08002610  00012610  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080026bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f0  20000070  0800272c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000260  0800272c  00020260  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fda0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000296a  00000000  00000000  0002fe39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000694e  00000000  00000000  000327a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a80  00000000  00000000  000390f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ca8  00000000  00000000  00039b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005b52  00000000  00000000  0003a820  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ac9  00000000  00000000  00040372  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043e3b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000210c  00000000  00000000  00043eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080025f8 	.word	0x080025f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080025f8 	.word	0x080025f8

0800014c <PID>:
 *      Author: User
 */
#include "PID.h"
int16_t PID (uint16_t set_value,int16_t ierror, uint16_t Temp, uint16_t last_T,uint16_t time,TIM_HandleTypeDef *htim, uint32_t Channel, uint16_t Kp, uint16_t Ti, uint16_t Td)
{
int16_t error=Temp-set_value;
 800014c:	1a12      	subs	r2, r2, r0
time=time/1000;
int16_t derror=((Temp-set_value)-(last_T-set_value));
int16_t Ierror=ierror+(((Temp-set_value)+(last_T-set_value)));
 800014e:	4419      	add	r1, r3
int16_t error=Temp-set_value;
 8000150:	b292      	uxth	r2, r2
int16_t Ierror=ierror+(((Temp-set_value)+(last_T-set_value)));
 8000152:	1a09      	subs	r1, r1, r0
{
 8000154:	b530      	push	{r4, r5, lr}
int16_t Ierror=ierror+(((Temp-set_value)+(last_T-set_value)));
 8000156:	4411      	add	r1, r2
 8000158:	4d1b      	ldr	r5, [pc, #108]	; (80001c8 <PID+0x7c>)
 800015a:	b209      	sxth	r1, r1
 800015c:	42a9      	cmp	r1, r5
 800015e:	bfb8      	it	lt
 8000160:	4629      	movlt	r1, r5
 8000162:	f242 7510 	movw	r5, #10000	; 0x2710
int16_t derror=((Temp-set_value)-(last_T-set_value));
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4410      	add	r0, r2
 800016a:	42a9      	cmp	r1, r5
}
if(Ierror<(-10000))
{
	Ierror=-10000;
}
int32_t regulation = (error*Kp + derror*Td + Ierror*Ti)+6500;
 800016c:	b203      	sxth	r3, r0
 800016e:	bfa8      	it	ge
 8000170:	4629      	movge	r1, r5
 8000172:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8000176:	b212      	sxth	r2, r2
 8000178:	4342      	muls	r2, r0
 800017a:	f8bd 0020 	ldrh.w	r0, [sp, #32]
{
 800017e:	9c05      	ldr	r4, [sp, #20]
int32_t regulation = (error*Kp + derror*Td + Ierror*Ti)+6500;
 8000180:	fb00 2003 	mla	r0, r0, r3, r2
if(regulation >=19999)
 8000184:	f644 621e 	movw	r2, #19998	; 0x4e1e
int32_t regulation = (error*Kp + derror*Td + Ierror*Ti)+6500;
 8000188:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800018c:	fb03 0301 	mla	r3, r3, r1, r0
 8000190:	f503 53cb 	add.w	r3, r3, #6496	; 0x1960
 8000194:	3304      	adds	r3, #4
if(regulation >=19999)
 8000196:	4293      	cmp	r3, r2
 8000198:	dc0a      	bgt.n	80001b0 <PID+0x64>
	regulation=19999;
if (regulation<7000)
	regulation=0;
 800019a:	f641 3257 	movw	r2, #6999	; 0x1b57
 800019e:	4293      	cmp	r3, r2
 80001a0:	bfd8      	it	le
 80001a2:	2300      	movle	r3, #0
 80001a4:	9a04      	ldr	r2, [sp, #16]
 80001a6:	6812      	ldr	r2, [r2, #0]
__HAL_TIM_SET_COMPARE(htim, Channel, regulation);
 80001a8:	b92c      	cbnz	r4, 80001b6 <PID+0x6a>
 80001aa:	6353      	str	r3, [r2, #52]	; 0x34
return Ierror;
}
 80001ac:	4608      	mov	r0, r1
 80001ae:	bd30      	pop	{r4, r5, pc}
	regulation=19999;
 80001b0:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80001b4:	e7f6      	b.n	80001a4 <PID+0x58>
__HAL_TIM_SET_COMPARE(htim, Channel, regulation);
 80001b6:	2c04      	cmp	r4, #4
 80001b8:	d101      	bne.n	80001be <PID+0x72>
 80001ba:	6393      	str	r3, [r2, #56]	; 0x38
 80001bc:	e7f6      	b.n	80001ac <PID+0x60>
 80001be:	2c08      	cmp	r4, #8
 80001c0:	bf0c      	ite	eq
 80001c2:	63d3      	streq	r3, [r2, #60]	; 0x3c
 80001c4:	6413      	strne	r3, [r2, #64]	; 0x40
 80001c6:	e7f1      	b.n	80001ac <PID+0x60>
 80001c8:	ffffd8f0 	.word	0xffffd8f0

080001cc <us_Delay>:
 *      Author: User
 */
#include "delay.h"
void us_Delay(uint16_t time_us)
{
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80001cc:	2200      	movs	r2, #0
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <us_Delay+0x10>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time_us);
 80001d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001d6:	4282      	cmp	r2, r0
 80001d8:	d3fc      	bcc.n	80001d4 <us_Delay+0x8>
}
 80001da:	4770      	bx	lr
 80001dc:	20000158 	.word	0x20000158

080001e0 <set_pin_input>:
/*
 * Funkcja konfiguruj¹ca pin jako wejœcie
 */

void set_pin_input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	4604      	mov	r4, r0
 80001e4:	460d      	mov	r5, r1
 80001e6:	b085      	sub	sp, #20
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e8:	2210      	movs	r2, #16
 80001ea:	2100      	movs	r1, #0
 80001ec:	4668      	mov	r0, sp
 80001ee:	f001 fdcf 	bl	8001d90 <memset>
	GPIO_InitStruct.Pin=GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 80001f2:	4669      	mov	r1, sp
 80001f4:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin=GPIO_Pin;
 80001f6:	9500      	str	r5, [sp, #0]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 80001f8:	f000 fddc 	bl	8000db4 <HAL_GPIO_Init>
}
 80001fc:	b005      	add	sp, #20
 80001fe:	bd30      	pop	{r4, r5, pc}

08000200 <set_pin_output>:

/*
 * Funkcja konfiguruj¹ca pin jako wyjœcie
 */
void set_pin_output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	b085      	sub	sp, #20
 8000204:	4604      	mov	r4, r0
 8000206:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000208:	2210      	movs	r2, #16
 800020a:	2100      	movs	r1, #0
 800020c:	4668      	mov	r0, sp
 800020e:	f001 fdbf 	bl	8001d90 <memset>
	GPIO_InitStruct.Pin=GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000212:	2301      	movs	r3, #1
 8000214:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000216:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8000218:	4669      	mov	r1, sp
 800021a:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin=GPIO_Pin;
 800021c:	9500      	str	r5, [sp, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021e:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8000220:	f000 fdc8 	bl	8000db4 <HAL_GPIO_Init>
}
 8000224:	b005      	add	sp, #20
 8000226:	bd30      	pop	{r4, r5, pc}

08000228 <DHT11_start>:
/*
 * Funkcja rozpoczynaj¹ca komunikacjê z czujnikiem DHT11
 */
uint8_t DHT11_start()
{
 8000228:	b510      	push	{r4, lr}
	set_pin_output(GPIOC,GPIO_PIN_3);
 800022a:	2108      	movs	r1, #8
 800022c:	481d      	ldr	r0, [pc, #116]	; (80002a4 <DHT11_start+0x7c>)
 800022e:	f7ff ffe7 	bl	8000200 <set_pin_output>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,SET);
 8000232:	2201      	movs	r2, #1
 8000234:	2108      	movs	r1, #8
 8000236:	481b      	ldr	r0, [pc, #108]	; (80002a4 <DHT11_start+0x7c>)
 8000238:	f000 fea4 	bl	8000f84 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800023c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000240:	f000 fcf4 	bl	8000c2c <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2108      	movs	r1, #8
 8000248:	4816      	ldr	r0, [pc, #88]	; (80002a4 <DHT11_start+0x7c>)
 800024a:	f000 fe9b 	bl	8000f84 <HAL_GPIO_WritePin>
	us_Delay(18000);
 800024e:	f244 6050 	movw	r0, #18000	; 0x4650
 8000252:	f7ff ffbb 	bl	80001cc <us_Delay>
	HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,SET);
 8000256:	2201      	movs	r2, #1
 8000258:	2108      	movs	r1, #8
 800025a:	4812      	ldr	r0, [pc, #72]	; (80002a4 <DHT11_start+0x7c>)
 800025c:	f000 fe92 	bl	8000f84 <HAL_GPIO_WritePin>
	us_Delay(20);
 8000260:	2014      	movs	r0, #20
 8000262:	f7ff ffb3 	bl	80001cc <us_Delay>
	HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2108      	movs	r1, #8
 800026a:	480e      	ldr	r0, [pc, #56]	; (80002a4 <DHT11_start+0x7c>)
 800026c:	f000 fe8a 	bl	8000f84 <HAL_GPIO_WritePin>
	set_pin_input(DHT11_PORT,DHT11_PIN);
 8000270:	2108      	movs	r1, #8
 8000272:	480c      	ldr	r0, [pc, #48]	; (80002a4 <DHT11_start+0x7c>)
 8000274:	f7ff ffb4 	bl	80001e0 <set_pin_input>
	//us_Delay(10);
 uint8_t response=0;
	if(!HAL_GPIO_ReadPin(DHT11_PORT,DHT11_PIN))
 8000278:	2108      	movs	r1, #8
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <DHT11_start+0x7c>)
 800027c:	f000 fe7c 	bl	8000f78 <HAL_GPIO_ReadPin>
 8000280:	b970      	cbnz	r0, 80002a0 <DHT11_start+0x78>

			{
				us_Delay(80);
 8000282:	2050      	movs	r0, #80	; 0x50
 8000284:	f7ff ffa2 	bl	80001cc <us_Delay>
				if(HAL_GPIO_ReadPin(DHT11_PORT,DHT11_PIN))
 8000288:	2108      	movs	r1, #8
 800028a:	4806      	ldr	r0, [pc, #24]	; (80002a4 <DHT11_start+0x7c>)
 800028c:	f000 fe74 	bl	8000f78 <HAL_GPIO_ReadPin>
 uint8_t response=0;
 8000290:	1c04      	adds	r4, r0, #0
 8000292:	bf18      	it	ne
 8000294:	2401      	movne	r4, #1
					response=1;
				else
					response=0;
			}
		us_Delay(80);
 8000296:	2050      	movs	r0, #80	; 0x50
 8000298:	f7ff ff98 	bl	80001cc <us_Delay>
	return response;
}
 800029c:	4620      	mov	r0, r4
 800029e:	bd10      	pop	{r4, pc}
 uint8_t response=0;
 80002a0:	2400      	movs	r4, #0
 80002a2:	e7f8      	b.n	8000296 <DHT11_start+0x6e>
 80002a4:	40011000 	.word	0x40011000

080002a8 <DHT11_get_T>:

/*
 * Funkcja pobieraj¹ca informacje o temperaturze
 */
void DHT11_get_T(uint8_t *temperature_integer, uint8_t *temperature_decimal)
{
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	4605      	mov	r5, r0
 80002ac:	460c      	mov	r4, r1
 80002ae:	2707      	movs	r7, #7
 uint8_t i=0;
		for(i=0;i<8;i++)
		{
					while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for DHT signal to go high
 80002b0:	4e21      	ldr	r6, [pc, #132]	; (8000338 <DHT11_get_T+0x90>)
 80002b2:	2108      	movs	r1, #8
 80002b4:	4630      	mov	r0, r6
 80002b6:	f000 fe5f 	bl	8000f78 <HAL_GPIO_ReadPin>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d0f9      	beq.n	80002b2 <DHT11_get_T+0xa>
					us_Delay (40);
 80002be:	2028      	movs	r0, #40	; 0x28
 80002c0:	f7ff ff84 	bl	80001cc <us_Delay>
					if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80002c4:	2108      	movs	r1, #8
 80002c6:	4630      	mov	r0, r6
 80002c8:	f000 fe56 	bl	8000f78 <HAL_GPIO_ReadPin>
 80002cc:	2201      	movs	r2, #1
 80002ce:	782b      	ldrb	r3, [r5, #0]
					{
						*temperature_integer&= ~(1<<(7-i));
 80002d0:	40ba      	lsls	r2, r7
					if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80002d2:	b9f8      	cbnz	r0, 8000314 <DHT11_get_T+0x6c>
						*temperature_integer&= ~(1<<(7-i));
 80002d4:	ea23 0302 	bic.w	r3, r3, r2
 80002d8:	702b      	strb	r3, [r5, #0]
		for(i=0;i<8;i++)
 80002da:	f117 37ff 	adds.w	r7, r7, #4294967295
 80002de:	d2e8      	bcs.n	80002b2 <DHT11_get_T+0xa>
 80002e0:	2607      	movs	r6, #7
						while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
					}
				}
		for(i=0;i<8;i++)
		{
					while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80002e2:	4d15      	ldr	r5, [pc, #84]	; (8000338 <DHT11_get_T+0x90>)
 80002e4:	2108      	movs	r1, #8
 80002e6:	4628      	mov	r0, r5
 80002e8:	f000 fe46 	bl	8000f78 <HAL_GPIO_ReadPin>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d0f9      	beq.n	80002e4 <DHT11_get_T+0x3c>
					us_Delay (40);
 80002f0:	2028      	movs	r0, #40	; 0x28
 80002f2:	f7ff ff6b 	bl	80001cc <us_Delay>
					if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80002f6:	2108      	movs	r1, #8
 80002f8:	4628      	mov	r0, r5
 80002fa:	f000 fe3d 	bl	8000f78 <HAL_GPIO_ReadPin>
 80002fe:	2201      	movs	r2, #1
 8000300:	7823      	ldrb	r3, [r4, #0]
					{
						*temperature_decimal&= ~(1<<(7-i));
 8000302:	40b2      	lsls	r2, r6
					if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000304:	b978      	cbnz	r0, 8000326 <DHT11_get_T+0x7e>
						*temperature_decimal&= ~(1<<(7-i));
 8000306:	ea23 0302 	bic.w	r3, r3, r2
 800030a:	7023      	strb	r3, [r4, #0]
		for(i=0;i<8;i++)
 800030c:	f116 36ff 	adds.w	r6, r6, #4294967295
 8000310:	d2e8      	bcs.n	80002e4 <DHT11_get_T+0x3c>
						*temperature_decimal|= (1<<(7-i));
						while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
					}
				}

}
 8000312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						*temperature_integer|= (1<<(7-i));
 8000314:	4313      	orrs	r3, r2
 8000316:	702b      	strb	r3, [r5, #0]
						while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8000318:	2108      	movs	r1, #8
 800031a:	4630      	mov	r0, r6
 800031c:	f000 fe2c 	bl	8000f78 <HAL_GPIO_ReadPin>
 8000320:	2800      	cmp	r0, #0
 8000322:	d1f9      	bne.n	8000318 <DHT11_get_T+0x70>
 8000324:	e7d9      	b.n	80002da <DHT11_get_T+0x32>
						*temperature_decimal|= (1<<(7-i));
 8000326:	4313      	orrs	r3, r2
 8000328:	7023      	strb	r3, [r4, #0]
						while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800032a:	2108      	movs	r1, #8
 800032c:	4628      	mov	r0, r5
 800032e:	f000 fe23 	bl	8000f78 <HAL_GPIO_ReadPin>
 8000332:	2800      	cmp	r0, #0
 8000334:	d1f9      	bne.n	800032a <DHT11_get_T+0x82>
 8000336:	e7e9      	b.n	800030c <DHT11_get_T+0x64>
 8000338:	40011000 	.word	0x40011000

0800033c <DHT11_get_H>:
 800033c:	f7ff bfb4 	b.w	80002a8 <DHT11_get_T>

08000340 <DHT11_checksum>:

/*
 *
 */
void DHT11_checksum(uint8_t *check_sum)
{
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	4607      	mov	r7, r0
 8000344:	2507      	movs	r5, #7
 uint8_t i=0,checksum=0;
 8000346:	2400      	movs	r4, #0
			for(i=0;i<8;i++)
			{
						//us_Delay (50);   // wait for DHT signal to go high
						while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8000348:	4e10      	ldr	r6, [pc, #64]	; (800038c <DHT11_checksum+0x4c>)
 800034a:	2108      	movs	r1, #8
 800034c:	4630      	mov	r0, r6
 800034e:	f000 fe13 	bl	8000f78 <HAL_GPIO_ReadPin>
 8000352:	2800      	cmp	r0, #0
 8000354:	d0f9      	beq.n	800034a <DHT11_checksum+0xa>
						us_Delay (40);
 8000356:	2028      	movs	r0, #40	; 0x28
 8000358:	f7ff ff38 	bl	80001cc <us_Delay>
						if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800035c:	2108      	movs	r1, #8
 800035e:	4630      	mov	r0, r6
 8000360:	f000 fe0a 	bl	8000f78 <HAL_GPIO_ReadPin>
 8000364:	2301      	movs	r3, #1
						{
							checksum&= ~(1<<(7-i));   // write 0
 8000366:	40ab      	lsls	r3, r5
						if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000368:	b930      	cbnz	r0, 8000378 <DHT11_checksum+0x38>
							checksum&= ~(1<<(7-i));   // write 0
 800036a:	ea24 0403 	bic.w	r4, r4, r3
			for(i=0;i<8;i++)
 800036e:	f115 35ff 	adds.w	r5, r5, #4294967295
 8000372:	d2ea      	bcs.n	800034a <DHT11_checksum+0xa>
							checksum|= (1<<(7-i)); // if the pin is high, write 1
					//	us_Delay (42);
							while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
						}
					}
		    *check_sum= checksum;
 8000374:	703c      	strb	r4, [r7, #0]
 8000376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
							checksum|= (1<<(7-i)); // if the pin is high, write 1
 8000378:	431c      	orrs	r4, r3
 800037a:	b2e4      	uxtb	r4, r4
							while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800037c:	2108      	movs	r1, #8
 800037e:	4630      	mov	r0, r6
 8000380:	f000 fdfa 	bl	8000f78 <HAL_GPIO_ReadPin>
 8000384:	2800      	cmp	r0, #0
 8000386:	d1f9      	bne.n	800037c <DHT11_checksum+0x3c>
 8000388:	e7f1      	b.n	800036e <DHT11_checksum+0x2e>
 800038a:	bf00      	nop
 800038c:	40011000 	.word	0x40011000

08000390 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000390:	2210      	movs	r2, #16
{
 8000392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000394:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	eb0d 0002 	add.w	r0, sp, r2
 800039a:	2100      	movs	r1, #0
 800039c:	f001 fcf8 	bl	8001d90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003a2:	4e3a      	ldr	r6, [pc, #232]	; (800048c <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003a6:	4630      	mov	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a8:	f042 0210 	orr.w	r2, r2, #16
 80003ac:	619a      	str	r2, [r3, #24]
 80003ae:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003b0:	2160      	movs	r1, #96	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b2:	f002 0210 	and.w	r2, r2, #16
 80003b6:	9200      	str	r2, [sp, #0]
 80003b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ba:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003be:	f042 0220 	orr.w	r2, r2, #32
 80003c2:	619a      	str	r2, [r3, #24]
 80003c4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c6:	4f32      	ldr	r7, [pc, #200]	; (8000490 <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c8:	f002 0220 	and.w	r2, r2, #32
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	699a      	ldr	r2, [r3, #24]
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d2:	2503      	movs	r5, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	f042 0204 	orr.w	r2, r2, #4
 80003d8:	619a      	str	r2, [r3, #24]
 80003da:	699a      	ldr	r2, [r3, #24]
 80003dc:	f002 0204 	and.w	r2, r2, #4
 80003e0:	9202      	str	r2, [sp, #8]
 80003e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	699a      	ldr	r2, [r3, #24]
 80003e6:	f042 0208 	orr.w	r2, r2, #8
 80003ea:	619a      	str	r2, [r3, #24]
 80003ec:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	9303      	str	r3, [sp, #12]
 80003f6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003f8:	f000 fdc4 	bl	8000f84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80003fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000400:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000402:	4b24      	ldr	r3, [pc, #144]	; (8000494 <MX_GPIO_Init+0x104>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000404:	a904      	add	r1, sp, #16
 8000406:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000408:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800040c:	f000 fcd2 	bl	8000db4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8000410:	f641 73f7 	movw	r3, #8183	; 0x1ff7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000414:	a904      	add	r1, sp, #16
 8000416:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8000418:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800041c:	f000 fcca 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000420:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000422:	a904      	add	r1, sp, #16
 8000424:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000426:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000428:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042c:	f000 fcc2 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA7 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8 
 8000430:	f649 7392 	movw	r3, #40850	; 0x9f92
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	a904      	add	r1, sp, #16
 8000436:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8 
 8000438:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f000 fcba 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000440:	2360      	movs	r3, #96	; 0x60
 8000442:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	a904      	add	r1, sp, #16
 800044c:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	f000 fcaf 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 
                           PB13 PB14 PB15 PB4 
                           PB5 PB6 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 8000456:	f24f 33f7 	movw	r3, #62455	; 0xf3f7
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045a:	a904      	add	r1, sp, #16
 800045c:	480e      	ldr	r0, [pc, #56]	; (8000498 <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 800045e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000460:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000462:	f000 fca7 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000466:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000468:	a904      	add	r1, sp, #16
 800046a:	480c      	ldr	r0, [pc, #48]	; (800049c <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800046c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000470:	f000 fca0 	bl	8000db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000474:	4622      	mov	r2, r4
 8000476:	4621      	mov	r1, r4
 8000478:	2028      	movs	r0, #40	; 0x28
 800047a:	f000 fbfb 	bl	8000c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800047e:	2028      	movs	r0, #40	; 0x28
 8000480:	f000 fc2c 	bl	8000cdc <HAL_NVIC_EnableIRQ>

}
 8000484:	b009      	add	sp, #36	; 0x24
 8000486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	40010800 	.word	0x40010800
 8000490:	40011000 	.word	0x40011000
 8000494:	10110000 	.word	0x10110000
 8000498:	40010c00 	.word	0x40010c00
 800049c:	40011400 	.word	0x40011400

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b510      	push	{r4, lr}
 80004a2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a4:	2228      	movs	r2, #40	; 0x28
 80004a6:	2100      	movs	r1, #0
 80004a8:	a806      	add	r0, sp, #24
 80004aa:	f001 fc71 	bl	8001d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ae:	2214      	movs	r2, #20
 80004b0:	2100      	movs	r1, #0
 80004b2:	a801      	add	r0, sp, #4
 80004b4:	f001 fc6c 	bl	8001d90 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004bc:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004be:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004c2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004c8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ca:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004cc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f000 fd6b 	bl	8000fa8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004da:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004dc:	4621      	mov	r1, r4
 80004de:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e8:	f000 ff38 	bl	800135c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80004ec:	b010      	add	sp, #64	; 0x40
 80004ee:	bd10      	pop	{r4, pc}

080004f0 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback()
{
	time++;
 80004f0:	4a0a      	ldr	r2, [pc, #40]	; (800051c <HAL_SYSTICK_Callback+0x2c>)
{
 80004f2:	b510      	push	{r4, lr}
	time++;
 80004f4:	8813      	ldrh	r3, [r2, #0]
	send_time++;
 80004f6:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <HAL_SYSTICK_Callback+0x30>)
	time++;
 80004f8:	3301      	adds	r3, #1
 80004fa:	8013      	strh	r3, [r2, #0]
	send_time++;
 80004fc:	8823      	ldrh	r3, [r4, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	b29b      	uxth	r3, r3
	if(send_time>=1000)
 8000502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	send_time++;
 8000506:	8023      	strh	r3, [r4, #0]
	if(send_time>=1000)
 8000508:	d307      	bcc.n	800051a <HAL_SYSTICK_Callback+0x2a>
	{
		HAL_UART_Transmit_IT(&huart3, data, size);
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_SYSTICK_Callback+0x34>)
 800050c:	4906      	ldr	r1, [pc, #24]	; (8000528 <HAL_SYSTICK_Callback+0x38>)
 800050e:	881a      	ldrh	r2, [r3, #0]
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <HAL_SYSTICK_Callback+0x3c>)
 8000512:	f001 fabf 	bl	8001a94 <HAL_UART_Transmit_IT>
		send_time=0;
 8000516:	2300      	movs	r3, #0
 8000518:	8023      	strh	r3, [r4, #0]
 800051a:	bd10      	pop	{r4, pc}
 800051c:	20000098 	.word	0x20000098
 8000520:	20000094 	.word	0x20000094
 8000524:	20000096 	.word	0x20000096
 8000528:	200000b2 	.word	0x200000b2
 800052c:	200001d8 	.word	0x200001d8

08000530 <conversion>:
 * Co 1s odœwie¿a interfejs na telefonie wysy³aj¹c wiadomoœc przygotowan¹ w funkcji main
 */

void conversion(struct value *data)
{
data->calculation_value=10*(data->integer)+((data->integer)/10);
 8000530:	210a      	movs	r1, #10
 8000532:	7803      	ldrb	r3, [r0, #0]
 8000534:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000538:	fbb3 f3f1 	udiv	r3, r3, r1
 800053c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000540:	8043      	strh	r3, [r0, #2]
 8000542:	4770      	bx	lr

08000544 <HAL_UART_RxCpltCallback>:
 * Modyfikuje wartoœc do obliczeñ na podstawie czêœci rzeczywistej i dziesiêtnej
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	switch (Received) {
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <HAL_UART_RxCpltCallback+0x90>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b54      	cmp	r3, #84	; 0x54
 800054a:	d01c      	beq.n	8000586 <HAL_UART_RxCpltCallback+0x42>
 800054c:	d807      	bhi.n	800055e <HAL_UART_RxCpltCallback+0x1a>
 800054e:	2b49      	cmp	r3, #73	; 0x49
 8000550:	d02c      	beq.n	80005ac <HAL_UART_RxCpltCallback+0x68>
 8000552:	2b4b      	cmp	r3, #75	; 0x4b
 8000554:	d01d      	beq.n	8000592 <HAL_UART_RxCpltCallback+0x4e>
 8000556:	2b44      	cmp	r3, #68	; 0x44
 8000558:	d106      	bne.n	8000568 <HAL_UART_RxCpltCallback+0x24>
				 }
			 }

	 break;
	 case 68:
		 if(Td.decimal<90)
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <HAL_UART_RxCpltCallback+0x94>)
 800055c:	e014      	b.n	8000588 <HAL_UART_RxCpltCallback+0x44>
	switch (Received) {
 800055e:	2b69      	cmp	r3, #105	; 0x69
 8000560:	d026      	beq.n	80005b0 <HAL_UART_RxCpltCallback+0x6c>
 8000562:	d806      	bhi.n	8000572 <HAL_UART_RxCpltCallback+0x2e>
 8000564:	2b64      	cmp	r3, #100	; 0x64
 8000566:	d02b      	beq.n	80005c0 <HAL_UART_RxCpltCallback+0x7c>
	 break;
	 default:

	 break;
	 }
	HAL_UART_Receive_IT(&huart3, &Received, 1);
 8000568:	2201      	movs	r2, #1
 800056a:	491a      	ldr	r1, [pc, #104]	; (80005d4 <HAL_UART_RxCpltCallback+0x90>)
 800056c:	481b      	ldr	r0, [pc, #108]	; (80005dc <HAL_UART_RxCpltCallback+0x98>)
 800056e:	f001 bab0 	b.w	8001ad2 <HAL_UART_Receive_IT>
	switch (Received) {
 8000572:	2b6b      	cmp	r3, #107	; 0x6b
 8000574:	d00f      	beq.n	8000596 <HAL_UART_RxCpltCallback+0x52>
 8000576:	2b74      	cmp	r3, #116	; 0x74
 8000578:	d1f6      	bne.n	8000568 <HAL_UART_RxCpltCallback+0x24>
	 if(set.decimal>0)
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <HAL_UART_RxCpltCallback+0x9c>)
 800057c:	785a      	ldrb	r2, [r3, #1]
 800057e:	b30a      	cbz	r2, 80005c4 <HAL_UART_RxCpltCallback+0x80>
		 set.decimal-=10;
 8000580:	3a0a      	subs	r2, #10
 8000582:	705a      	strb	r2, [r3, #1]
 8000584:	e7f0      	b.n	8000568 <HAL_UART_RxCpltCallback+0x24>
		 if(set.decimal<90)
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_UART_RxCpltCallback+0x9c>)
		 if(Td.decimal<90)
 8000588:	785a      	ldrb	r2, [r3, #1]
 800058a:	2a59      	cmp	r2, #89	; 0x59
 800058c:	d812      	bhi.n	80005b4 <HAL_UART_RxCpltCallback+0x70>
					 Td.decimal+=10;
 800058e:	320a      	adds	r2, #10
 8000590:	e7f7      	b.n	8000582 <HAL_UART_RxCpltCallback+0x3e>
		 if(Kp.decimal<90)
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <HAL_UART_RxCpltCallback+0xa0>)
 8000594:	e7f8      	b.n	8000588 <HAL_UART_RxCpltCallback+0x44>
		 if(Kp.decimal>0)
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <HAL_UART_RxCpltCallback+0xa0>)
 8000598:	785a      	ldrb	r2, [r3, #1]
 800059a:	2a00      	cmp	r2, #0
 800059c:	d1f0      	bne.n	8000580 <HAL_UART_RxCpltCallback+0x3c>
				 if (Kp.integer<=0 && Kp.integer<=0)
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	2a00      	cmp	r2, #0
 80005a2:	d0e1      	beq.n	8000568 <HAL_UART_RxCpltCallback+0x24>
				 Kp.decimal=90;
 80005a4:	215a      	movs	r1, #90	; 0x5a
 80005a6:	7059      	strb	r1, [r3, #1]
				 Td.integer--;
 80005a8:	3a01      	subs	r2, #1
 80005aa:	e007      	b.n	80005bc <HAL_UART_RxCpltCallback+0x78>
		 if(Ti.decimal<90)
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <HAL_UART_RxCpltCallback+0xa4>)
 80005ae:	e7eb      	b.n	8000588 <HAL_UART_RxCpltCallback+0x44>
		 if(Ti.decimal>0)
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <HAL_UART_RxCpltCallback+0xa4>)
 80005b2:	e7e3      	b.n	800057c <HAL_UART_RxCpltCallback+0x38>
					 Td.decimal=0;
 80005b4:	2200      	movs	r2, #0
 80005b6:	705a      	strb	r2, [r3, #1]
					 Td.integer++;
 80005b8:	781a      	ldrb	r2, [r3, #0]
 80005ba:	3201      	adds	r2, #1
				 Td.integer--;
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	e7d3      	b.n	8000568 <HAL_UART_RxCpltCallback+0x24>
		 if(Td.decimal>0)
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_UART_RxCpltCallback+0x94>)
 80005c2:	e7db      	b.n	800057c <HAL_UART_RxCpltCallback+0x38>
				 if (Td.integer<=0 && Td.decimal<=0)
 80005c4:	881a      	ldrh	r2, [r3, #0]
 80005c6:	b90a      	cbnz	r2, 80005cc <HAL_UART_RxCpltCallback+0x88>
					 Td.integer=0;
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e7da      	b.n	8000582 <HAL_UART_RxCpltCallback+0x3e>
				 Td.decimal=90;
 80005cc:	225a      	movs	r2, #90	; 0x5a
 80005ce:	705a      	strb	r2, [r3, #1]
				 Td.integer--;
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	e7e9      	b.n	80005a8 <HAL_UART_RxCpltCallback+0x64>
 80005d4:	200000a8 	.word	0x200000a8
 80005d8:	20000150 	.word	0x20000150
 80005dc:	200001d8 	.word	0x200001d8
 80005e0:	20000154 	.word	0x20000154
 80005e4:	2000014c 	.word	0x2000014c
 80005e8:	20000148 	.word	0x20000148

080005ec <init>:
 * Pozwala zmieniac wartoœci poszczególnych nastaw regulatora przy pomocy aplikacji na telefonie
 */

void init()
{
	  RH.integer=0;
 80005ec:	2300      	movs	r3, #0
	  RH.decimal=0;
	  Temp.integer=0;
	  Temp.decimal=0;
	  Kp.integer=45;
 80005ee:	212d      	movs	r1, #45	; 0x2d
	  RH.integer=0;
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <init+0x30>)
 80005f2:	7013      	strb	r3, [r2, #0]
	  RH.decimal=0;
 80005f4:	7053      	strb	r3, [r2, #1]
	  Temp.integer=0;
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <init+0x34>)
 80005f8:	7013      	strb	r3, [r2, #0]
	  Temp.decimal=0;
 80005fa:	7053      	strb	r3, [r2, #1]
	  Kp.integer=45;
 80005fc:	4a09      	ldr	r2, [pc, #36]	; (8000624 <init+0x38>)
 80005fe:	7011      	strb	r1, [r2, #0]
	  Kp.decimal=0;
	  Ti.integer=30;
 8000600:	211e      	movs	r1, #30
	  Kp.decimal=0;
 8000602:	7053      	strb	r3, [r2, #1]
	  Ti.integer=30;
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <init+0x3c>)
 8000606:	7011      	strb	r1, [r2, #0]
	  Ti.decimal=0;
	  Td.integer=10;
 8000608:	210a      	movs	r1, #10
	  Ti.decimal=0;
 800060a:	7053      	strb	r3, [r2, #1]
	  Td.integer=10;
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <init+0x40>)
 800060e:	7011      	strb	r1, [r2, #0]
	  Td.decimal=0;
	  set.integer=26;
 8000610:	211a      	movs	r1, #26
	  Td.decimal=0;
 8000612:	7053      	strb	r3, [r2, #1]
	  set.integer=26;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <init+0x44>)
 8000616:	7011      	strb	r1, [r2, #0]
	  set.decimal=0;
 8000618:	7053      	strb	r3, [r2, #1]
 800061a:	4770      	bx	lr
 800061c:	200000ae 	.word	0x200000ae
 8000620:	200000aa 	.word	0x200000aa
 8000624:	2000014c 	.word	0x2000014c
 8000628:	20000148 	.word	0x20000148
 800062c:	20000150 	.word	0x20000150
 8000630:	20000154 	.word	0x20000154

08000634 <main>:
{
 8000634:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000638:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800063a:	f000 fad3 	bl	8000be4 <HAL_Init>
  SystemClock_Config();
 800063e:	f7ff ff2f 	bl	80004a0 <SystemClock_Config>
  MX_GPIO_Init();
 8000642:	f7ff fea5 	bl	8000390 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000646:	f000 f939 	bl	80008bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800064a:	f000 fa05 	bl	8000a58 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800064e:	f000 f9b3 	bl	80009b8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000652:	f000 fa1d 	bl	8000a90 <MX_USART3_UART_Init>
  HAL_TIM_Base_Start(&htim1);
 8000656:	4846      	ldr	r0, [pc, #280]	; (8000770 <main+0x13c>)
 8000658:	f000 ffb2 	bl	80015c0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	4845      	ldr	r0, [pc, #276]	; (8000774 <main+0x140>)
 8000660:	f001 f968 	bl	8001934 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	4843      	ldr	r0, [pc, #268]	; (8000778 <main+0x144>)
 800066a:	f000 fc8b 	bl	8000f84 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart3, &Received, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	4942      	ldr	r1, [pc, #264]	; (800077c <main+0x148>)
 8000672:	4843      	ldr	r0, [pc, #268]	; (8000780 <main+0x14c>)
 8000674:	f001 fa2d 	bl	8001ad2 <HAL_UART_Receive_IT>
  init();
 8000678:	f7ff ffb8 	bl	80005ec <init>
conversion(&Kp);
 800067c:	4d41      	ldr	r5, [pc, #260]	; (8000784 <main+0x150>)
conversion(&Ti);
 800067e:	4e42      	ldr	r6, [pc, #264]	; (8000788 <main+0x154>)
conversion(&Td);
 8000680:	4f42      	ldr	r7, [pc, #264]	; (800078c <main+0x158>)
last_T=(100*Temp.integer+Temp.decimal);
 8000682:	4c43      	ldr	r4, [pc, #268]	; (8000790 <main+0x15c>)
 8000684:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80007b4 <main+0x180>
 8000688:	7823      	ldrb	r3, [r4, #0]
 800068a:	7862      	ldrb	r2, [r4, #1]
 800068c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000690:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
conversion(&Temp);
 8000698:	4620      	mov	r0, r4
last_T=(100*Temp.integer+Temp.decimal);
 800069a:	f8a8 3000 	strh.w	r3, [r8]
conversion(&Temp);
 800069e:	f7ff ff47 	bl	8000530 <conversion>
conversion(&RH);
 80006a2:	483c      	ldr	r0, [pc, #240]	; (8000794 <main+0x160>)
 80006a4:	f7ff ff44 	bl	8000530 <conversion>
conversion(&Kp);
 80006a8:	4628      	mov	r0, r5
 80006aa:	f7ff ff41 	bl	8000530 <conversion>
conversion(&Ti);
 80006ae:	4630      	mov	r0, r6
 80006b0:	f7ff ff3e 	bl	8000530 <conversion>
conversion(&Td);
 80006b4:	4638      	mov	r0, r7
 80006b6:	f7ff ff3b 	bl	8000530 <conversion>
conversion(&set);
 80006ba:	4837      	ldr	r0, [pc, #220]	; (8000798 <main+0x164>)
 80006bc:	f7ff ff38 	bl	8000530 <conversion>
     n= DHT11_start();
 80006c0:	f7ff fdb2 	bl	8000228 <DHT11_start>
 80006c4:	4b35      	ldr	r3, [pc, #212]	; (800079c <main+0x168>)
     if(n==1)
 80006c6:	2801      	cmp	r0, #1
     n= DHT11_start();
 80006c8:	7018      	strb	r0, [r3, #0]
     if(n==1)
 80006ca:	d10a      	bne.n	80006e2 <main+0xae>
    	 DHT11_get_H(&RH.integer,&RH.decimal);
 80006cc:	4934      	ldr	r1, [pc, #208]	; (80007a0 <main+0x16c>)
 80006ce:	1e48      	subs	r0, r1, #1
 80006d0:	f7ff fe34 	bl	800033c <DHT11_get_H>
    	 DHT11_get_T(&Temp.integer,&Temp.decimal);
 80006d4:	4620      	mov	r0, r4
 80006d6:	1c61      	adds	r1, r4, #1
 80006d8:	f7ff fde6 	bl	80002a8 <DHT11_get_T>
    	 DHT11_checksum(&check_s);
 80006dc:	4831      	ldr	r0, [pc, #196]	; (80007a4 <main+0x170>)
 80006de:	f7ff fe2f 	bl	8000340 <DHT11_checksum>
     Ierror= PID (set.calculation_value,Ierror,Temp.calculation_value,last_T, time,&htim2,TIM_CHANNEL_1,Kp.calculation_value,Ti.calculation_value,Td.calculation_value);
 80006e2:	f04f 0a00 	mov.w	sl, #0
 80006e6:	f8b8 3000 	ldrh.w	r3, [r8]
 80006ea:	f8b7 e002 	ldrh.w	lr, [r7, #2]
 80006ee:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000798 <main+0x164>
 80006f2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80007b8 <main+0x184>
 80006f6:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80006fa:	f8cd e014 	str.w	lr, [sp, #20]
 80006fe:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 8000702:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80007bc <main+0x188>
 8000706:	f8cd e010 	str.w	lr, [sp, #16]
 800070a:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 800070e:	8862      	ldrh	r2, [r4, #2]
 8000710:	f8cd e00c 	str.w	lr, [sp, #12]
 8000714:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8000774 <main+0x140>
 8000718:	f9bb 1000 	ldrsh.w	r1, [fp]
 800071c:	f8cd e004 	str.w	lr, [sp, #4]
 8000720:	f8b9 e000 	ldrh.w	lr, [r9]
 8000724:	f8cd a008 	str.w	sl, [sp, #8]
 8000728:	f8cd e000 	str.w	lr, [sp]
 800072c:	f7ff fd0e 	bl	800014c <PID>
    size = sprintf(data, "TEMP: %d.%d \n\rsetT: %d.%d \n\rKp: %d.%d \n\rTi: %d.%d \n\rTd: %d.%d \n\r \n\r \n\r",Temp.integer,Temp.decimal,set.integer,set.decimal,Kp.integer, Kp.decimal,Ti.integer,Ti.decimal,Td.integer,Td.decimal);
 8000730:	7879      	ldrb	r1, [r7, #1]
     Ierror= PID (set.calculation_value,Ierror,Temp.calculation_value,last_T, time,&htim2,TIM_CHANNEL_1,Kp.calculation_value,Ti.calculation_value,Td.calculation_value);
 8000732:	f8ab 0000 	strh.w	r0, [fp]
    size = sprintf(data, "TEMP: %d.%d \n\rsetT: %d.%d \n\rKp: %d.%d \n\rTi: %d.%d \n\rTd: %d.%d \n\r \n\r \n\r",Temp.integer,Temp.decimal,set.integer,set.decimal,Kp.integer, Kp.decimal,Ti.integer,Ti.decimal,Td.integer,Td.decimal);
 8000736:	9107      	str	r1, [sp, #28]
 8000738:	7839      	ldrb	r1, [r7, #0]
 800073a:	7863      	ldrb	r3, [r4, #1]
 800073c:	9106      	str	r1, [sp, #24]
 800073e:	7871      	ldrb	r1, [r6, #1]
 8000740:	7822      	ldrb	r2, [r4, #0]
 8000742:	9105      	str	r1, [sp, #20]
 8000744:	7831      	ldrb	r1, [r6, #0]
 8000746:	4818      	ldr	r0, [pc, #96]	; (80007a8 <main+0x174>)
 8000748:	9104      	str	r1, [sp, #16]
 800074a:	7869      	ldrb	r1, [r5, #1]
     time=0;
 800074c:	f8a9 a000 	strh.w	sl, [r9]
    size = sprintf(data, "TEMP: %d.%d \n\rsetT: %d.%d \n\rKp: %d.%d \n\rTi: %d.%d \n\rTd: %d.%d \n\r \n\r \n\r",Temp.integer,Temp.decimal,set.integer,set.decimal,Kp.integer, Kp.decimal,Ti.integer,Ti.decimal,Td.integer,Td.decimal);
 8000750:	9103      	str	r1, [sp, #12]
 8000752:	7829      	ldrb	r1, [r5, #0]
 8000754:	9102      	str	r1, [sp, #8]
 8000756:	f898 1001 	ldrb.w	r1, [r8, #1]
 800075a:	9101      	str	r1, [sp, #4]
 800075c:	f898 1000 	ldrb.w	r1, [r8]
 8000760:	9100      	str	r1, [sp, #0]
 8000762:	4912      	ldr	r1, [pc, #72]	; (80007ac <main+0x178>)
 8000764:	f001 fb1c 	bl	8001da0 <siprintf>
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <main+0x17c>)
 800076a:	8018      	strh	r0, [r3, #0]
last_T=(100*Temp.integer+Temp.decimal);
 800076c:	e789      	b.n	8000682 <main+0x4e>
 800076e:	bf00      	nop
 8000770:	20000158 	.word	0x20000158
 8000774:	20000198 	.word	0x20000198
 8000778:	40010800 	.word	0x40010800
 800077c:	200000a8 	.word	0x200000a8
 8000780:	200001d8 	.word	0x200001d8
 8000784:	2000014c 	.word	0x2000014c
 8000788:	20000148 	.word	0x20000148
 800078c:	20000150 	.word	0x20000150
 8000790:	200000aa 	.word	0x200000aa
 8000794:	200000ae 	.word	0x200000ae
 8000798:	20000154 	.word	0x20000154
 800079c:	20000092 	.word	0x20000092
 80007a0:	200000af 	.word	0x200000af
 80007a4:	2000008e 	.word	0x2000008e
 80007a8:	200000b2 	.word	0x200000b2
 80007ac:	08002620 	.word	0x08002620
 80007b0:	20000096 	.word	0x20000096
 80007b4:	20000090 	.word	0x20000090
 80007b8:	20000098 	.word	0x20000098
 80007bc:	2000008c 	.word	0x2000008c

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_MspInit+0x3c>)
{
 80007c6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c8:	699a      	ldr	r2, [r3, #24]
 80007ca:	f042 0201 	orr.w	r2, r2, #1
 80007ce:	619a      	str	r2, [r3, #24]
 80007d0:	699a      	ldr	r2, [r3, #24]
 80007d2:	f002 0201 	and.w	r2, r2, #1
 80007d6:	9200      	str	r2, [sp, #0]
 80007d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007e0:	61da      	str	r2, [r3, #28]
 80007e2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ee:	6853      	ldr	r3, [r2, #4]
 80007f0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	b002      	add	sp, #8
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	40010000 	.word	0x40010000

08000808 <NMI_Handler>:
 8000808:	4770      	bx	lr

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	e7fe      	b.n	800080a <HardFault_Handler>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	e7fe      	b.n	800080c <MemManage_Handler>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	e7fe      	b.n	800080e <BusFault_Handler>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	e7fe      	b.n	8000810 <UsageFault_Handler>

08000812 <SVC_Handler>:
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	4770      	bx	lr

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
HAL_SYSTICK_Callback();
 800081a:	f7ff fe69 	bl	80004f0 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8000822:	f000 b9f1 	b.w	8000c08 <HAL_IncTick>
	...

08000828 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000828:	4801      	ldr	r0, [pc, #4]	; (8000830 <USART3_IRQHandler+0x8>)
 800082a:	f001 b9b9 	b.w	8001ba0 <HAL_UART_IRQHandler>
 800082e:	bf00      	nop
 8000830:	200001d8 	.word	0x200001d8

08000834 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000834:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000838:	f000 bbaa 	b.w	8000f90 <HAL_GPIO_EXTI_IRQHandler>

0800083c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800083c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <_sbrk+0x2c>)
{
 8000840:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000842:	6819      	ldr	r1, [r3, #0]
 8000844:	b909      	cbnz	r1, 800084a <_sbrk+0xe>
		heap_end = &end;
 8000846:	4909      	ldr	r1, [pc, #36]	; (800086c <_sbrk+0x30>)
 8000848:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800084a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800084c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800084e:	4402      	add	r2, r0
 8000850:	428a      	cmp	r2, r1
 8000852:	d906      	bls.n	8000862 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000854:	f001 fa72 	bl	8001d3c <__errno>
 8000858:	230c      	movs	r3, #12
 800085a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000862:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000864:	bd08      	pop	{r3, pc}
 8000866:	bf00      	nop
 8000868:	2000009c 	.word	0x2000009c
 800086c:	20000260 	.word	0x20000260

08000870 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <SystemInit+0x40>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	f042 0201 	orr.w	r2, r2, #1
 8000878:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800087a:	6859      	ldr	r1, [r3, #4]
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <SystemInit+0x44>)
 800087e:	400a      	ands	r2, r1
 8000880:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800088c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000894:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800089c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800089e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80008a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <SystemInit+0x48>)
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000
 80008b4:	f8ff0000 	.word	0xf8ff0000
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	2210      	movs	r2, #16
 80008c0:	2100      	movs	r1, #0
 80008c2:	a802      	add	r0, sp, #8
 80008c4:	f001 fa64 	bl	8001d90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 63;
 80008c8:	223f      	movs	r2, #63	; 0x3f
  htim1.Instance = TIM1;
 80008ca:	4815      	ldr	r0, [pc, #84]	; (8000920 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 63;
 80008cc:	4915      	ldr	r1, [pc, #84]	; (8000924 <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 63;
 80008d0:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 19999;
 80008d4:	f644 621f 	movw	r2, #19999	; 0x4e1f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	9301      	str	r3, [sp, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 19999;
 80008de:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e2:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e6:	f000 feb7 	bl	8001658 <HAL_TIM_Base_Init>
 80008ea:	b108      	cbz	r0, 80008f0 <MX_TIM1_Init+0x34>
  {
    Error_Handler();
 80008ec:	f7ff ff68 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f4:	a902      	add	r1, sp, #8
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <MX_TIM1_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008fa:	f000 ff79 	bl	80017f0 <HAL_TIM_ConfigClockSource>
 80008fe:	b108      	cbz	r0, 8000904 <MX_TIM1_Init+0x48>
  {
    Error_Handler();
 8000900:	f7ff ff5e 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000906:	4669      	mov	r1, sp
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090e:	f001 f82d 	bl	800196c <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	b108      	cbz	r0, 8000918 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000914:	f7ff ff54 	bl	80007c0 <Error_Handler>
  }

}
 8000918:	b007      	add	sp, #28
 800091a:	f85d fb04 	ldr.w	pc, [sp], #4
 800091e:	bf00      	nop
 8000920:	20000158 	.word	0x20000158
 8000924:	40012c00 	.word	0x40012c00

08000928 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8000928:	6803      	ldr	r3, [r0, #0]
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_TIM_Base_MspInit+0x40>)
{
 800092c:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10b      	bne.n	800094a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_TIM_Base_MspInit+0x44>)
 8000934:	699a      	ldr	r2, [r3, #24]
 8000936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800093a:	619a      	str	r2, [r3, #24]
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000946:	b002      	add	sp, #8
 8000948:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 800094a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800094e:	d1fa      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000950:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	f042 0201 	orr.w	r2, r2, #1
 800095a:	61da      	str	r2, [r3, #28]
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	9b01      	ldr	r3, [sp, #4]
}
 8000966:	e7ee      	b.n	8000946 <HAL_TIM_Base_MspInit+0x1e>
 8000968:	40012c00 	.word	0x40012c00
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000970:	b510      	push	{r4, lr}
 8000972:	4604      	mov	r4, r0
 8000974:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	2210      	movs	r2, #16
 8000978:	2100      	movs	r1, #0
 800097a:	a802      	add	r0, sp, #8
 800097c:	f001 fa08 	bl	8001d90 <memset>
  if(timHandle->Instance==TIM2)
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000986:	d113      	bne.n	80009b0 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800098c:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	f042 0204 	orr.w	r2, r2, #4
 8000994:	619a      	str	r2, [r3, #24]
 8000996:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a2:	2301      	movs	r3, #1
 80009a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f000 fa02 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009b0:	b006      	add	sp, #24
 80009b2:	bd10      	pop	{r4, pc}
 80009b4:	40010800 	.word	0x40010800

080009b8 <MX_TIM2_Init>:
{
 80009b8:	b510      	push	{r4, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009bc:	2210      	movs	r2, #16
 80009be:	2100      	movs	r1, #0
 80009c0:	a803      	add	r0, sp, #12
 80009c2:	f001 f9e5 	bl	8001d90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c6:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c8:	221c      	movs	r2, #28
 80009ca:	4621      	mov	r1, r4
 80009cc:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	9401      	str	r4, [sp, #4]
 80009d2:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d4:	f001 f9dc 	bl	8001d90 <memset>
  htim2.Init.Prescaler = 6;
 80009d8:	2306      	movs	r3, #6
 80009da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80009de:	481d      	ldr	r0, [pc, #116]	; (8000a54 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 6;
 80009e0:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 20000;
 80009e4:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 20000;
 80009ea:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f0:	f000 fe32 	bl	8001658 <HAL_TIM_Base_Init>
 80009f4:	b108      	cbz	r0, 80009fa <MX_TIM2_Init+0x42>
    Error_Handler();
 80009f6:	f7ff fee3 	bl	80007c0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fe:	a903      	add	r1, sp, #12
 8000a00:	4814      	ldr	r0, [pc, #80]	; (8000a54 <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a02:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a04:	f000 fef4 	bl	80017f0 <HAL_TIM_ConfigClockSource>
 8000a08:	b108      	cbz	r0, 8000a0e <MX_TIM2_Init+0x56>
    Error_Handler();
 8000a0a:	f7ff fed9 	bl	80007c0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <MX_TIM2_Init+0x9c>)
 8000a10:	f000 fe3c 	bl	800168c <HAL_TIM_PWM_Init>
 8000a14:	b108      	cbz	r0, 8000a1a <MX_TIM2_Init+0x62>
    Error_Handler();
 8000a16:	f7ff fed3 	bl	80007c0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1c:	a901      	add	r1, sp, #4
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a24:	f000 ffa2 	bl	800196c <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	b108      	cbz	r0, 8000a2e <MX_TIM2_Init+0x76>
    Error_Handler();
 8000a2a:	f7ff fec9 	bl	80007c0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	2200      	movs	r2, #0
 8000a32:	a907      	add	r1, sp, #28
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <MX_TIM2_Init+0x9c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a36:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8000a38:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3a:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	f000 fe6b 	bl	8001718 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	b108      	cbz	r0, 8000a48 <MX_TIM2_Init+0x90>
    Error_Handler();
 8000a44:	f7ff febc 	bl	80007c0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <MX_TIM2_Init+0x9c>)
 8000a4a:	f7ff ff91 	bl	8000970 <HAL_TIM_MspPostInit>
}
 8000a4e:	b00e      	add	sp, #56	; 0x38
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	20000198 	.word	0x20000198

08000a58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a58:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000a5a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 8000a5e:	480a      	ldr	r0, [pc, #40]	; (8000a88 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a62:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8000a64:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a68:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6a:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a70:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a76:	f000 ffdf 	bl	8001a38 <HAL_UART_Init>
 8000a7a:	b118      	cbz	r0, 8000a84 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a80:	f7ff be9e 	b.w	80007c0 <Error_Handler>
 8000a84:	bd08      	pop	{r3, pc}
 8000a86:	bf00      	nop
 8000a88:	20000218 	.word	0x20000218
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a90:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
 8000a92:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart3.Instance = USART3;
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 9600;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a9a:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 9600;
 8000a9c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa0:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa2:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa8:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aae:	f000 ffc3 	bl	8001a38 <HAL_UART_Init>
 8000ab2:	b118      	cbz	r0, 8000abc <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000ab8:	f7ff be82 	b.w	80007c0 <Error_Handler>
 8000abc:	bd08      	pop	{r3, pc}
 8000abe:	bf00      	nop
 8000ac0:	200001d8 	.word	0x200001d8
 8000ac4:	40004800 	.word	0x40004800

08000ac8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	2210      	movs	r2, #16
{
 8000aca:	b510      	push	{r4, lr}
 8000acc:	4604      	mov	r4, r0
 8000ace:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	eb0d 0002 	add.w	r0, sp, r2
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f001 f95b 	bl	8001d90 <memset>
  if(uartHandle->Instance==USART2)
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	4a2a      	ldr	r2, [pc, #168]	; (8000b88 <HAL_UART_MspInit+0xc0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d11d      	bne.n	8000b1e <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <HAL_UART_MspInit+0xc4>)
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	4829      	ldr	r0, [pc, #164]	; (8000b90 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000aee:	61da      	str	r2, [r3, #28]
 8000af0:	69da      	ldr	r2, [r3, #28]
 8000af2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000af6:	9200      	str	r2, [sp, #0]
 8000af8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	699a      	ldr	r2, [r3, #24]
 8000afc:	f042 0204 	orr.w	r2, r2, #4
 8000b00:	619a      	str	r2, [r3, #24]
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f000 f94d 	bl	8000db4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b1a:	b008      	add	sp, #32
 8000b1c:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 8000b1e:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <HAL_UART_MspInit+0xcc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d1fa      	bne.n	8000b1a <HAL_UART_MspInit+0x52>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b28:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	481b      	ldr	r0, [pc, #108]	; (8000b98 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b30:	61da      	str	r2, [r3, #28]
 8000b32:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b36:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000b3a:	9202      	str	r2, [sp, #8]
 8000b3c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	699a      	ldr	r2, [r3, #24]
 8000b40:	f042 0208 	orr.w	r2, r2, #8
 8000b44:	619a      	str	r2, [r3, #24]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	9303      	str	r3, [sp, #12]
 8000b4e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f000 f929 	bl	8000db4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	a904      	add	r1, sp, #16
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b6a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f000 f920 	bl	8000db4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b74:	4622      	mov	r2, r4
 8000b76:	4621      	mov	r1, r4
 8000b78:	2027      	movs	r0, #39	; 0x27
 8000b7a:	f000 f87b 	bl	8000c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b7e:	2027      	movs	r0, #39	; 0x27
 8000b80:	f000 f8ac 	bl	8000cdc <HAL_NVIC_EnableIRQ>
}
 8000b84:	e7c9      	b.n	8000b1a <HAL_UART_MspInit+0x52>
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40004800 	.word	0x40004800
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_InitTick+0x3c>)
{
 8000ba0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba2:	7818      	ldrb	r0, [r3, #0]
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <HAL_InitTick+0x40>)
 8000bae:	6810      	ldr	r0, [r2, #0]
 8000bb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bb4:	f000 f8a0 	bl	8000cf8 <HAL_SYSTICK_Config>
 8000bb8:	4604      	mov	r4, r0
 8000bba:	b958      	cbnz	r0, 8000bd4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	2d0f      	cmp	r5, #15
 8000bbe:	d809      	bhi.n	8000bd4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f854 	bl	8000c74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <HAL_InitTick+0x44>)
 8000bce:	4620      	mov	r0, r4
 8000bd0:	601d      	str	r5, [r3, #0]
 8000bd2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000bd6:	bd38      	pop	{r3, r4, r5, pc}
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x20>)
{
 8000be6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf2:	f000 f82d 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff ffd0 	bl	8000b9c <HAL_InitTick>
  HAL_MspInit();
 8000bfc:	f7ff fde2 	bl	80007c4 <HAL_MspInit>
}
 8000c00:	2000      	movs	r0, #0
 8000c02:	bd08      	pop	{r3, pc}
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x10>)
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <HAL_IncTick+0x14>)
 8000c0c:	6811      	ldr	r1, [r2, #0]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	440b      	add	r3, r1
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000258 	.word	0x20000258
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c20:	4b01      	ldr	r3, [pc, #4]	; (8000c28 <HAL_GetTick+0x8>)
 8000c22:	6818      	ldr	r0, [r3, #0]
}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000258 	.word	0x20000258

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff6 	bl	8000c20 <HAL_GetTick>
 8000c34:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c38:	bf1e      	ittt	ne
 8000c3a:	4b04      	ldrne	r3, [pc, #16]	; (8000c4c <HAL_Delay+0x20>)
 8000c3c:	781b      	ldrbne	r3, [r3, #0]
 8000c3e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	1b40      	subs	r0, r0, r5
 8000c46:	4284      	cmp	r4, r0
 8000c48:	d8fa      	bhi.n	8000c40 <HAL_Delay+0x14>
  {
  }
}
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c52:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c56:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c5e:	041b      	lsls	r3, r3, #16
 8000c60:	0c1b      	lsrs	r3, r3, #16
 8000c62:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c6a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c6c:	60d3      	str	r3, [r2, #12]
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c76:	b530      	push	{r4, r5, lr}
 8000c78:	68dc      	ldr	r4, [r3, #12]
 8000c7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	bf28      	it	cs
 8000c88:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c90:	bf98      	it	ls
 8000c92:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	fa05 f303 	lsl.w	r3, r5, r3
 8000c98:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9c:	bf88      	it	hi
 8000c9e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4019      	ands	r1, r3
 8000ca2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	fa05 f404 	lsl.w	r4, r5, r4
 8000ca8:	3c01      	subs	r4, #1
 8000caa:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000cac:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cae:	ea42 0201 	orr.w	r2, r2, r1
 8000cb2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	bfa9      	itett	ge
 8000cb8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	4b06      	ldrlt	r3, [pc, #24]	; (8000cd8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	b2d2      	uxtbge	r2, r2
 8000cc0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	bfbb      	ittet	lt
 8000cc6:	f000 000f 	andlt.w	r0, r0, #15
 8000cca:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	541a      	strblt	r2, [r3, r0]
 8000cd2:	bd30      	pop	{r4, r5, pc}
 8000cd4:	e000ed00 	.word	0xe000ed00
 8000cd8:	e000ed14 	.word	0xe000ed14

08000cdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	db08      	blt.n	8000cf2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	0942      	lsrs	r2, r0, #5
 8000ce4:	f000 001f 	and.w	r0, r0, #31
 8000ce8:	fa03 f000 	lsl.w	r0, r3, r0
 8000cec:	4b01      	ldr	r3, [pc, #4]	; (8000cf4 <HAL_NVIC_EnableIRQ+0x18>)
 8000cee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cfe:	d20a      	bcs.n	8000d16 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d24:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000d28:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d003      	beq.n	8000d36 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d32:	2001      	movs	r0, #1
 8000d34:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d36:	6803      	ldr	r3, [r0, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	f022 020e 	bic.w	r2, r2, #14
 8000d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	f022 0201 	bic.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d48:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_DMA_Abort_IT+0x88>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d01f      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x6a>
 8000d4e:	3214      	adds	r2, #20
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d01e      	beq.n	8000d92 <HAL_DMA_Abort_IT+0x6e>
 8000d54:	3214      	adds	r2, #20
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d01d      	beq.n	8000d96 <HAL_DMA_Abort_IT+0x72>
 8000d5a:	3214      	adds	r2, #20
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d01d      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x78>
 8000d60:	3214      	adds	r2, #20
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01d      	beq.n	8000da2 <HAL_DMA_Abort_IT+0x7e>
 8000d66:	3214      	adds	r2, #20
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	bf0c      	ite	eq
 8000d6c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000d70:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d76:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d78:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d80:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000d82:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000d86:	b17b      	cbz	r3, 8000da8 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000d88:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e7f0      	b.n	8000d74 <HAL_DMA_Abort_IT+0x50>
 8000d92:	2310      	movs	r3, #16
 8000d94:	e7ee      	b.n	8000d74 <HAL_DMA_Abort_IT+0x50>
 8000d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9a:	e7eb      	b.n	8000d74 <HAL_DMA_Abort_IT+0x50>
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	e7e8      	b.n	8000d74 <HAL_DMA_Abort_IT+0x50>
 8000da2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da6:	e7e5      	b.n	8000d74 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000da8:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000daa:	bd10      	pop	{r4, pc}
 8000dac:	40020008 	.word	0x40020008
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000db8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000dba:	4626      	mov	r6, r4
 8000dbc:	4b66      	ldr	r3, [pc, #408]	; (8000f58 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dbe:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000f68 <HAL_GPIO_Init+0x1b4>
 8000dc2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000f6c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	680a      	ldr	r2, [r1, #0]
 8000dc8:	fa32 f506 	lsrs.w	r5, r2, r6
 8000dcc:	d102      	bne.n	8000dd4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000dce:	b003      	add	sp, #12
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000dd4:	f04f 0801 	mov.w	r8, #1
 8000dd8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ddc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000de0:	4590      	cmp	r8, r2
 8000de2:	d17f      	bne.n	8000ee4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000de4:	684d      	ldr	r5, [r1, #4]
 8000de6:	2d12      	cmp	r5, #18
 8000de8:	f000 80aa 	beq.w	8000f40 <HAL_GPIO_Init+0x18c>
 8000dec:	f200 8083 	bhi.w	8000ef6 <HAL_GPIO_Init+0x142>
 8000df0:	2d02      	cmp	r5, #2
 8000df2:	f000 80a2 	beq.w	8000f3a <HAL_GPIO_Init+0x186>
 8000df6:	d877      	bhi.n	8000ee8 <HAL_GPIO_Init+0x134>
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	f000 8089 	beq.w	8000f10 <HAL_GPIO_Init+0x15c>
 8000dfe:	2d01      	cmp	r5, #1
 8000e00:	f000 8099 	beq.w	8000f36 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e04:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e08:	2aff      	cmp	r2, #255	; 0xff
 8000e0a:	bf93      	iteet	ls
 8000e0c:	4682      	movls	sl, r0
 8000e0e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000e12:	3d08      	subhi	r5, #8
 8000e14:	f8d0 b000 	ldrls.w	fp, [r0]
 8000e18:	bf92      	itee	ls
 8000e1a:	00b5      	lslls	r5, r6, #2
 8000e1c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000e20:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e22:	fa09 f805 	lsl.w	r8, r9, r5
 8000e26:	ea2b 0808 	bic.w	r8, fp, r8
 8000e2a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e2e:	bf88      	it	hi
 8000e30:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e34:	ea48 0505 	orr.w	r5, r8, r5
 8000e38:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e3c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000e40:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000e44:	d04e      	beq.n	8000ee4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4d45      	ldr	r5, [pc, #276]	; (8000f5c <HAL_GPIO_Init+0x1a8>)
 8000e48:	4f44      	ldr	r7, [pc, #272]	; (8000f5c <HAL_GPIO_Init+0x1a8>)
 8000e4a:	69ad      	ldr	r5, [r5, #24]
 8000e4c:	f026 0803 	bic.w	r8, r6, #3
 8000e50:	f045 0501 	orr.w	r5, r5, #1
 8000e54:	61bd      	str	r5, [r7, #24]
 8000e56:	69bd      	ldr	r5, [r7, #24]
 8000e58:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000e5c:	f005 0501 	and.w	r5, r5, #1
 8000e60:	9501      	str	r5, [sp, #4]
 8000e62:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e66:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e6c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000e70:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e74:	fa09 f90b 	lsl.w	r9, r9, fp
 8000e78:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	4d38      	ldr	r5, [pc, #224]	; (8000f60 <HAL_GPIO_Init+0x1ac>)
 8000e7e:	42a8      	cmp	r0, r5
 8000e80:	d063      	beq.n	8000f4a <HAL_GPIO_Init+0x196>
 8000e82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e86:	42a8      	cmp	r0, r5
 8000e88:	d061      	beq.n	8000f4e <HAL_GPIO_Init+0x19a>
 8000e8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e8e:	42a8      	cmp	r0, r5
 8000e90:	d05f      	beq.n	8000f52 <HAL_GPIO_Init+0x19e>
 8000e92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e96:	42a8      	cmp	r0, r5
 8000e98:	bf0c      	ite	eq
 8000e9a:	2503      	moveq	r5, #3
 8000e9c:	2504      	movne	r5, #4
 8000e9e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ea2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000ea6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000eaa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb0:	bf14      	ite	ne
 8000eb2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eb4:	4395      	biceq	r5, r2
 8000eb6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000eb8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000ebe:	bf14      	ite	ne
 8000ec0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ec2:	4395      	biceq	r5, r2
 8000ec4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ec6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ecc:	bf14      	ite	ne
 8000ece:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ed0:	4395      	biceq	r5, r2
 8000ed2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ed4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eda:	bf14      	ite	ne
 8000edc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ede:	ea25 0202 	biceq.w	r2, r5, r2
 8000ee2:	60da      	str	r2, [r3, #12]
	position++;
 8000ee4:	3601      	adds	r6, #1
 8000ee6:	e76e      	b.n	8000dc6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000ee8:	2d03      	cmp	r5, #3
 8000eea:	d022      	beq.n	8000f32 <HAL_GPIO_Init+0x17e>
 8000eec:	2d11      	cmp	r5, #17
 8000eee:	d189      	bne.n	8000e04 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef0:	68cc      	ldr	r4, [r1, #12]
 8000ef2:	3404      	adds	r4, #4
          break;
 8000ef4:	e786      	b.n	8000e04 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000ef6:	4f1b      	ldr	r7, [pc, #108]	; (8000f64 <HAL_GPIO_Init+0x1b0>)
 8000ef8:	42bd      	cmp	r5, r7
 8000efa:	d009      	beq.n	8000f10 <HAL_GPIO_Init+0x15c>
 8000efc:	d812      	bhi.n	8000f24 <HAL_GPIO_Init+0x170>
 8000efe:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000f70 <HAL_GPIO_Init+0x1bc>
 8000f02:	454d      	cmp	r5, r9
 8000f04:	d004      	beq.n	8000f10 <HAL_GPIO_Init+0x15c>
 8000f06:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000f0a:	454d      	cmp	r5, r9
 8000f0c:	f47f af7a 	bne.w	8000e04 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f10:	688c      	ldr	r4, [r1, #8]
 8000f12:	b1c4      	cbz	r4, 8000f46 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f14:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000f16:	bf0c      	ite	eq
 8000f18:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000f1c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f20:	2408      	movs	r4, #8
 8000f22:	e76f      	b.n	8000e04 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000f24:	4575      	cmp	r5, lr
 8000f26:	d0f3      	beq.n	8000f10 <HAL_GPIO_Init+0x15c>
 8000f28:	4565      	cmp	r5, ip
 8000f2a:	d0f1      	beq.n	8000f10 <HAL_GPIO_Init+0x15c>
 8000f2c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000f74 <HAL_GPIO_Init+0x1c0>
 8000f30:	e7eb      	b.n	8000f0a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f32:	2400      	movs	r4, #0
 8000f34:	e766      	b.n	8000e04 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f36:	68cc      	ldr	r4, [r1, #12]
          break;
 8000f38:	e764      	b.n	8000e04 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f3a:	68cc      	ldr	r4, [r1, #12]
 8000f3c:	3408      	adds	r4, #8
          break;
 8000f3e:	e761      	b.n	8000e04 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f40:	68cc      	ldr	r4, [r1, #12]
 8000f42:	340c      	adds	r4, #12
          break;
 8000f44:	e75e      	b.n	8000e04 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f46:	2404      	movs	r4, #4
 8000f48:	e75c      	b.n	8000e04 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	e7a7      	b.n	8000e9e <HAL_GPIO_Init+0xea>
 8000f4e:	2501      	movs	r5, #1
 8000f50:	e7a5      	b.n	8000e9e <HAL_GPIO_Init+0xea>
 8000f52:	2502      	movs	r5, #2
 8000f54:	e7a3      	b.n	8000e9e <HAL_GPIO_Init+0xea>
 8000f56:	bf00      	nop
 8000f58:	40010400 	.word	0x40010400
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	10210000 	.word	0x10210000
 8000f68:	10310000 	.word	0x10310000
 8000f6c:	10320000 	.word	0x10320000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	10220000 	.word	0x10220000

08000f78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f78:	6883      	ldr	r3, [r0, #8]
 8000f7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000f7c:	bf14      	ite	ne
 8000f7e:	2001      	movne	r0, #1
 8000f80:	2000      	moveq	r0, #0
 8000f82:	4770      	bx	lr

08000f84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f84:	b10a      	cbz	r2, 8000f8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f86:	6101      	str	r1, [r0, #16]
 8000f88:	4770      	bx	lr
 8000f8a:	0409      	lsls	r1, r1, #16
 8000f8c:	e7fb      	b.n	8000f86 <HAL_GPIO_WritePin+0x2>

08000f8e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f8e:	4770      	bx	lr

08000f90 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000f90:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000f94:	6959      	ldr	r1, [r3, #20]
 8000f96:	4201      	tst	r1, r0
 8000f98:	d002      	beq.n	8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f9a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f9c:	f7ff fff7 	bl	8000f8e <HAL_GPIO_EXTI_Callback>
 8000fa0:	bd08      	pop	{r3, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fac:	4605      	mov	r5, r0
 8000fae:	b908      	cbnz	r0, 8000fb4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	e03c      	b.n	800102e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb4:	6803      	ldr	r3, [r0, #0]
 8000fb6:	07db      	lsls	r3, r3, #31
 8000fb8:	d410      	bmi.n	8000fdc <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	682b      	ldr	r3, [r5, #0]
 8000fbc:	079f      	lsls	r7, r3, #30
 8000fbe:	d45d      	bmi.n	800107c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	0719      	lsls	r1, r3, #28
 8000fc4:	f100 8094 	bmi.w	80010f0 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	075a      	lsls	r2, r3, #29
 8000fcc:	f100 80be 	bmi.w	800114c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd0:	69e8      	ldr	r0, [r5, #28]
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	f040 812c 	bne.w	8001230 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000fd8:	2000      	movs	r0, #0
 8000fda:	e028      	b.n	800102e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fdc:	4c8f      	ldr	r4, [pc, #572]	; (800121c <HAL_RCC_OscConfig+0x274>)
 8000fde:	6863      	ldr	r3, [r4, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d007      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe8:	6863      	ldr	r3, [r4, #4]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d109      	bne.n	8001006 <HAL_RCC_OscConfig+0x5e>
 8000ff2:	6863      	ldr	r3, [r4, #4]
 8000ff4:	03de      	lsls	r6, r3, #15
 8000ff6:	d506      	bpl.n	8001006 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	039c      	lsls	r4, r3, #14
 8000ffc:	d5dd      	bpl.n	8000fba <HAL_RCC_OscConfig+0x12>
 8000ffe:	686b      	ldr	r3, [r5, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1da      	bne.n	8000fba <HAL_RCC_OscConfig+0x12>
 8001004:	e7d4      	b.n	8000fb0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001006:	686b      	ldr	r3, [r5, #4]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d112      	bne.n	8001034 <HAL_RCC_OscConfig+0x8c>
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001014:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001016:	f7ff fe03 	bl	8000c20 <HAL_GetTick>
 800101a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	0398      	lsls	r0, r3, #14
 8001020:	d4cb      	bmi.n	8000fba <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff fdfd 	bl	8000c20 <HAL_GetTick>
 8001026:	1b80      	subs	r0, r0, r6
 8001028:	2864      	cmp	r0, #100	; 0x64
 800102a:	d9f7      	bls.n	800101c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800102c:	2003      	movs	r0, #3
}
 800102e:	b002      	add	sp, #8
 8001030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001034:	b99b      	cbnz	r3, 800105e <HAL_RCC_OscConfig+0xb6>
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001044:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001046:	f7ff fdeb 	bl	8000c20 <HAL_GetTick>
 800104a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	0399      	lsls	r1, r3, #14
 8001050:	d5b3      	bpl.n	8000fba <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001052:	f7ff fde5 	bl	8000c20 <HAL_GetTick>
 8001056:	1b80      	subs	r0, r0, r6
 8001058:	2864      	cmp	r0, #100	; 0x64
 800105a:	d9f7      	bls.n	800104c <HAL_RCC_OscConfig+0xa4>
 800105c:	e7e6      	b.n	800102c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	d103      	bne.n	800106e <HAL_RCC_OscConfig+0xc6>
 8001066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800106a:	6023      	str	r3, [r4, #0]
 800106c:	e7cf      	b.n	800100e <HAL_RCC_OscConfig+0x66>
 800106e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001072:	6023      	str	r3, [r4, #0]
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107a:	e7cb      	b.n	8001014 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800107c:	4c67      	ldr	r4, [pc, #412]	; (800121c <HAL_RCC_OscConfig+0x274>)
 800107e:	6863      	ldr	r3, [r4, #4]
 8001080:	f013 0f0c 	tst.w	r3, #12
 8001084:	d007      	beq.n	8001096 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d110      	bne.n	80010b2 <HAL_RCC_OscConfig+0x10a>
 8001090:	6863      	ldr	r3, [r4, #4]
 8001092:	03da      	lsls	r2, r3, #15
 8001094:	d40d      	bmi.n	80010b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	079b      	lsls	r3, r3, #30
 800109a:	d502      	bpl.n	80010a2 <HAL_RCC_OscConfig+0xfa>
 800109c:	692b      	ldr	r3, [r5, #16]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d186      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	696a      	ldr	r2, [r5, #20]
 80010a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010ae:	6023      	str	r3, [r4, #0]
 80010b0:	e786      	b.n	8000fc0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b2:	692a      	ldr	r2, [r5, #16]
 80010b4:	4b5a      	ldr	r3, [pc, #360]	; (8001220 <HAL_RCC_OscConfig+0x278>)
 80010b6:	b16a      	cbz	r2, 80010d4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010bc:	f7ff fdb0 	bl	8000c20 <HAL_GetTick>
 80010c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	079f      	lsls	r7, r3, #30
 80010c6:	d4ec      	bmi.n	80010a2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fdaa 	bl	8000c20 <HAL_GetTick>
 80010cc:	1b80      	subs	r0, r0, r6
 80010ce:	2802      	cmp	r0, #2
 80010d0:	d9f7      	bls.n	80010c2 <HAL_RCC_OscConfig+0x11a>
 80010d2:	e7ab      	b.n	800102c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80010d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010d6:	f7ff fda3 	bl	8000c20 <HAL_GetTick>
 80010da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	0798      	lsls	r0, r3, #30
 80010e0:	f57f af6e 	bpl.w	8000fc0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fd9c 	bl	8000c20 <HAL_GetTick>
 80010e8:	1b80      	subs	r0, r0, r6
 80010ea:	2802      	cmp	r0, #2
 80010ec:	d9f6      	bls.n	80010dc <HAL_RCC_OscConfig+0x134>
 80010ee:	e79d      	b.n	800102c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f0:	69aa      	ldr	r2, [r5, #24]
 80010f2:	4c4a      	ldr	r4, [pc, #296]	; (800121c <HAL_RCC_OscConfig+0x274>)
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <HAL_RCC_OscConfig+0x27c>)
 80010f6:	b1da      	cbz	r2, 8001130 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010fc:	f7ff fd90 	bl	8000c20 <HAL_GetTick>
 8001100:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001104:	079b      	lsls	r3, r3, #30
 8001106:	d50d      	bpl.n	8001124 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001108:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800110c:	4b46      	ldr	r3, [pc, #280]	; (8001228 <HAL_RCC_OscConfig+0x280>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	fbb3 f3f2 	udiv	r3, r3, r2
 8001114:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001116:	bf00      	nop
  }
  while (Delay --);
 8001118:	9b01      	ldr	r3, [sp, #4]
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	9201      	str	r2, [sp, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f9      	bne.n	8001116 <HAL_RCC_OscConfig+0x16e>
 8001122:	e751      	b.n	8000fc8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff fd7c 	bl	8000c20 <HAL_GetTick>
 8001128:	1b80      	subs	r0, r0, r6
 800112a:	2802      	cmp	r0, #2
 800112c:	d9e9      	bls.n	8001102 <HAL_RCC_OscConfig+0x15a>
 800112e:	e77d      	b.n	800102c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001130:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001132:	f7ff fd75 	bl	8000c20 <HAL_GetTick>
 8001136:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800113a:	079f      	lsls	r7, r3, #30
 800113c:	f57f af44 	bpl.w	8000fc8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fd6e 	bl	8000c20 <HAL_GetTick>
 8001144:	1b80      	subs	r0, r0, r6
 8001146:	2802      	cmp	r0, #2
 8001148:	d9f6      	bls.n	8001138 <HAL_RCC_OscConfig+0x190>
 800114a:	e76f      	b.n	800102c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114c:	4c33      	ldr	r4, [pc, #204]	; (800121c <HAL_RCC_OscConfig+0x274>)
 800114e:	69e3      	ldr	r3, [r4, #28]
 8001150:	00d8      	lsls	r0, r3, #3
 8001152:	d424      	bmi.n	800119e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001154:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	69e3      	ldr	r3, [r4, #28]
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	61e3      	str	r3, [r4, #28]
 800115e:	69e3      	ldr	r3, [r4, #28]
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	4e30      	ldr	r6, [pc, #192]	; (800122c <HAL_RCC_OscConfig+0x284>)
 800116a:	6833      	ldr	r3, [r6, #0]
 800116c:	05d9      	lsls	r1, r3, #23
 800116e:	d518      	bpl.n	80011a2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001170:	68eb      	ldr	r3, [r5, #12]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d126      	bne.n	80011c4 <HAL_RCC_OscConfig+0x21c>
 8001176:	6a23      	ldr	r3, [r4, #32]
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800117e:	f7ff fd4f 	bl	8000c20 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001182:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001186:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001188:	6a23      	ldr	r3, [r4, #32]
 800118a:	079b      	lsls	r3, r3, #30
 800118c:	d53f      	bpl.n	800120e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800118e:	2f00      	cmp	r7, #0
 8001190:	f43f af1e 	beq.w	8000fd0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001194:	69e3      	ldr	r3, [r4, #28]
 8001196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119a:	61e3      	str	r3, [r4, #28]
 800119c:	e718      	b.n	8000fd0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800119e:	2700      	movs	r7, #0
 80011a0:	e7e2      	b.n	8001168 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a2:	6833      	ldr	r3, [r6, #0]
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011aa:	f7ff fd39 	bl	8000c20 <HAL_GetTick>
 80011ae:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b0:	6833      	ldr	r3, [r6, #0]
 80011b2:	05da      	lsls	r2, r3, #23
 80011b4:	d4dc      	bmi.n	8001170 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b6:	f7ff fd33 	bl	8000c20 <HAL_GetTick>
 80011ba:	eba0 0008 	sub.w	r0, r0, r8
 80011be:	2864      	cmp	r0, #100	; 0x64
 80011c0:	d9f6      	bls.n	80011b0 <HAL_RCC_OscConfig+0x208>
 80011c2:	e733      	b.n	800102c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	b9ab      	cbnz	r3, 80011f2 <HAL_RCC_OscConfig+0x24a>
 80011c6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6223      	str	r3, [r4, #32]
 80011d2:	6a23      	ldr	r3, [r4, #32]
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011da:	f7ff fd21 	bl	8000c20 <HAL_GetTick>
 80011de:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e0:	6a23      	ldr	r3, [r4, #32]
 80011e2:	0798      	lsls	r0, r3, #30
 80011e4:	d5d3      	bpl.n	800118e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e6:	f7ff fd1b 	bl	8000c20 <HAL_GetTick>
 80011ea:	1b80      	subs	r0, r0, r6
 80011ec:	4540      	cmp	r0, r8
 80011ee:	d9f7      	bls.n	80011e0 <HAL_RCC_OscConfig+0x238>
 80011f0:	e71c      	b.n	800102c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	6a23      	ldr	r3, [r4, #32]
 80011f6:	d103      	bne.n	8001200 <HAL_RCC_OscConfig+0x258>
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6223      	str	r3, [r4, #32]
 80011fe:	e7ba      	b.n	8001176 <HAL_RCC_OscConfig+0x1ce>
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6223      	str	r3, [r4, #32]
 8001206:	6a23      	ldr	r3, [r4, #32]
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	e7b6      	b.n	800117c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fd07 	bl	8000c20 <HAL_GetTick>
 8001212:	eba0 0008 	sub.w	r0, r0, r8
 8001216:	42b0      	cmp	r0, r6
 8001218:	d9b6      	bls.n	8001188 <HAL_RCC_OscConfig+0x1e0>
 800121a:	e707      	b.n	800102c <HAL_RCC_OscConfig+0x84>
 800121c:	40021000 	.word	0x40021000
 8001220:	42420000 	.word	0x42420000
 8001224:	42420480 	.word	0x42420480
 8001228:	20000000 	.word	0x20000000
 800122c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <HAL_RCC_OscConfig+0x334>)
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	461c      	mov	r4, r3
 8001236:	f002 020c 	and.w	r2, r2, #12
 800123a:	2a08      	cmp	r2, #8
 800123c:	d03d      	beq.n	80012ba <HAL_RCC_OscConfig+0x312>
 800123e:	2300      	movs	r3, #0
 8001240:	4e27      	ldr	r6, [pc, #156]	; (80012e0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001242:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001244:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001246:	d12b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001248:	f7ff fcea 	bl	8000c20 <HAL_GetTick>
 800124c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	0199      	lsls	r1, r3, #6
 8001252:	d41f      	bmi.n	8001294 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001254:	6a2b      	ldr	r3, [r5, #32]
 8001256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125a:	d105      	bne.n	8001268 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800125c:	6862      	ldr	r2, [r4, #4]
 800125e:	68a9      	ldr	r1, [r5, #8]
 8001260:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001264:	430a      	orrs	r2, r1
 8001266:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001268:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800126a:	6862      	ldr	r2, [r4, #4]
 800126c:	430b      	orrs	r3, r1
 800126e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001272:	4313      	orrs	r3, r2
 8001274:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001276:	2301      	movs	r3, #1
 8001278:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800127a:	f7ff fcd1 	bl	8000c20 <HAL_GetTick>
 800127e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	019a      	lsls	r2, r3, #6
 8001284:	f53f aea8 	bmi.w	8000fd8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff fcca 	bl	8000c20 <HAL_GetTick>
 800128c:	1b40      	subs	r0, r0, r5
 800128e:	2802      	cmp	r0, #2
 8001290:	d9f6      	bls.n	8001280 <HAL_RCC_OscConfig+0x2d8>
 8001292:	e6cb      	b.n	800102c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001294:	f7ff fcc4 	bl	8000c20 <HAL_GetTick>
 8001298:	1bc0      	subs	r0, r0, r7
 800129a:	2802      	cmp	r0, #2
 800129c:	d9d7      	bls.n	800124e <HAL_RCC_OscConfig+0x2a6>
 800129e:	e6c5      	b.n	800102c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80012a0:	f7ff fcbe 	bl	8000c20 <HAL_GetTick>
 80012a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	f57f ae95 	bpl.w	8000fd8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ae:	f7ff fcb7 	bl	8000c20 <HAL_GetTick>
 80012b2:	1b40      	subs	r0, r0, r5
 80012b4:	2802      	cmp	r0, #2
 80012b6:	d9f6      	bls.n	80012a6 <HAL_RCC_OscConfig+0x2fe>
 80012b8:	e6b8      	b.n	800102c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ba:	2801      	cmp	r0, #1
 80012bc:	f43f aeb7 	beq.w	800102e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80012c0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c2:	6a2b      	ldr	r3, [r5, #32]
 80012c4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f47f ae71 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x8>
 80012ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012d0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80012d4:	1ac0      	subs	r0, r0, r3
 80012d6:	bf18      	it	ne
 80012d8:	2001      	movne	r0, #1
 80012da:	e6a8      	b.n	800102e <HAL_RCC_OscConfig+0x86>
 80012dc:	40021000 	.word	0x40021000
 80012e0:	42420060 	.word	0x42420060

080012e4 <HAL_RCC_GetSysClockFreq>:
{
 80012e4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80012e8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012ea:	ac02      	add	r4, sp, #8
 80012ec:	f103 0510 	add.w	r5, r3, #16
 80012f0:	4622      	mov	r2, r4
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	6859      	ldr	r1, [r3, #4]
 80012f6:	3308      	adds	r3, #8
 80012f8:	c203      	stmia	r2!, {r0, r1}
 80012fa:	42ab      	cmp	r3, r5
 80012fc:	4614      	mov	r4, r2
 80012fe:	d1f7      	bne.n	80012f0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001300:	2301      	movs	r3, #1
 8001302:	f88d 3004 	strb.w	r3, [sp, #4]
 8001306:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001308:	4911      	ldr	r1, [pc, #68]	; (8001350 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800130a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800130e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001310:	f003 020c 	and.w	r2, r3, #12
 8001314:	2a08      	cmp	r2, #8
 8001316:	d117      	bne.n	8001348 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001318:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800131c:	a806      	add	r0, sp, #24
 800131e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001320:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001322:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001326:	d50c      	bpl.n	8001342 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001328:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800132a:	480a      	ldr	r0, [pc, #40]	; (8001354 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800132c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001330:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001332:	aa06      	add	r2, sp, #24
 8001334:	4413      	add	r3, r2
 8001336:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800133a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800133e:	b007      	add	sp, #28
 8001340:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <HAL_RCC_GetSysClockFreq+0x74>)
 8001344:	4350      	muls	r0, r2
 8001346:	e7fa      	b.n	800133e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800134a:	e7f8      	b.n	800133e <HAL_RCC_GetSysClockFreq+0x5a>
 800134c:	08002610 	.word	0x08002610
 8001350:	40021000 	.word	0x40021000
 8001354:	007a1200 	.word	0x007a1200
 8001358:	003d0900 	.word	0x003d0900

0800135c <HAL_RCC_ClockConfig>:
{
 800135c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001360:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001362:	4604      	mov	r4, r0
 8001364:	b910      	cbnz	r0, 800136c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001366:	2001      	movs	r0, #1
 8001368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800136c:	4a45      	ldr	r2, [pc, #276]	; (8001484 <HAL_RCC_ClockConfig+0x128>)
 800136e:	6813      	ldr	r3, [r2, #0]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	428b      	cmp	r3, r1
 8001376:	d329      	bcc.n	80013cc <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001378:	6821      	ldr	r1, [r4, #0]
 800137a:	078e      	lsls	r6, r1, #30
 800137c:	d431      	bmi.n	80013e2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137e:	07ca      	lsls	r2, r1, #31
 8001380:	d444      	bmi.n	800140c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001382:	4a40      	ldr	r2, [pc, #256]	; (8001484 <HAL_RCC_ClockConfig+0x128>)
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	429d      	cmp	r5, r3
 800138c:	d367      	bcc.n	800145e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800138e:	6822      	ldr	r2, [r4, #0]
 8001390:	4d3d      	ldr	r5, [pc, #244]	; (8001488 <HAL_RCC_ClockConfig+0x12c>)
 8001392:	f012 0f04 	tst.w	r2, #4
 8001396:	d16e      	bne.n	8001476 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001398:	0713      	lsls	r3, r2, #28
 800139a:	d506      	bpl.n	80013aa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800139c:	686b      	ldr	r3, [r5, #4]
 800139e:	6922      	ldr	r2, [r4, #16]
 80013a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013a8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013aa:	f7ff ff9b 	bl	80012e4 <HAL_RCC_GetSysClockFreq>
 80013ae:	686b      	ldr	r3, [r5, #4]
 80013b0:	4a36      	ldr	r2, [pc, #216]	; (800148c <HAL_RCC_ClockConfig+0x130>)
 80013b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	40d8      	lsrs	r0, r3
 80013ba:	4b35      	ldr	r3, [pc, #212]	; (8001490 <HAL_RCC_ClockConfig+0x134>)
 80013bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80013be:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_RCC_ClockConfig+0x138>)
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7ff fbeb 	bl	8000b9c <HAL_InitTick>
  return HAL_OK;
 80013c6:	2000      	movs	r0, #0
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013cc:	6813      	ldr	r3, [r2, #0]
 80013ce:	f023 0307 	bic.w	r3, r3, #7
 80013d2:	430b      	orrs	r3, r1
 80013d4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	6813      	ldr	r3, [r2, #0]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4299      	cmp	r1, r3
 80013de:	d1c2      	bne.n	8001366 <HAL_RCC_ClockConfig+0xa>
 80013e0:	e7ca      	b.n	8001378 <HAL_RCC_ClockConfig+0x1c>
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e8:	bf1e      	ittt	ne
 80013ea:	685a      	ldrne	r2, [r3, #4]
 80013ec:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80013f0:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f2:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f4:	bf42      	ittt	mi
 80013f6:	685a      	ldrmi	r2, [r3, #4]
 80013f8:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80013fc:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	68a0      	ldr	r0, [r4, #8]
 8001402:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001406:	4302      	orrs	r2, r0
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	e7b8      	b.n	800137e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140c:	6862      	ldr	r2, [r4, #4]
 800140e:	4e1e      	ldr	r6, [pc, #120]	; (8001488 <HAL_RCC_ClockConfig+0x12c>)
 8001410:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001414:	d11b      	bne.n	800144e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	d0a4      	beq.n	8001366 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001422:	f023 0303 	bic.w	r3, r3, #3
 8001426:	4313      	orrs	r3, r2
 8001428:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800142a:	f7ff fbf9 	bl	8000c20 <HAL_GetTick>
 800142e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001430:	6873      	ldr	r3, [r6, #4]
 8001432:	6862      	ldr	r2, [r4, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800143c:	d0a1      	beq.n	8001382 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143e:	f7ff fbef 	bl	8000c20 <HAL_GetTick>
 8001442:	1bc0      	subs	r0, r0, r7
 8001444:	4540      	cmp	r0, r8
 8001446:	d9f3      	bls.n	8001430 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001448:	2003      	movs	r0, #3
}
 800144a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144e:	2a02      	cmp	r2, #2
 8001450:	d102      	bne.n	8001458 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001456:	e7e0      	b.n	800141a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	f013 0f02 	tst.w	r3, #2
 800145c:	e7dd      	b.n	800141a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	f023 0307 	bic.w	r3, r3, #7
 8001464:	432b      	orrs	r3, r5
 8001466:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001468:	6813      	ldr	r3, [r2, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	429d      	cmp	r5, r3
 8001470:	f47f af79 	bne.w	8001366 <HAL_RCC_ClockConfig+0xa>
 8001474:	e78b      	b.n	800138e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001476:	686b      	ldr	r3, [r5, #4]
 8001478:	68e1      	ldr	r1, [r4, #12]
 800147a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800147e:	430b      	orrs	r3, r1
 8001480:	606b      	str	r3, [r5, #4]
 8001482:	e789      	b.n	8001398 <HAL_RCC_ClockConfig+0x3c>
 8001484:	40022000 	.word	0x40022000
 8001488:	40021000 	.word	0x40021000
 800148c:	08002667 	.word	0x08002667
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014a6:	6810      	ldr	r0, [r2, #0]
}
 80014a8:	40d8      	lsrs	r0, r3
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08002677 	.word	0x08002677
 80014b4:	20000000 	.word	0x20000000

080014b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014c6:	6810      	ldr	r0, [r2, #0]
}
 80014c8:	40d8      	lsrs	r0, r3
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000
 80014d0:	08002677 	.word	0x08002677
 80014d4:	20000000 	.word	0x20000000

080014d8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014d8:	6a03      	ldr	r3, [r0, #32]
{
 80014da:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014e6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80014ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80014ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80014f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80014f2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80014f6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80014f8:	4d0a      	ldr	r5, [pc, #40]	; (8001524 <TIM_OC1_SetConfig+0x4c>)
 80014fa:	42a8      	cmp	r0, r5
 80014fc:	d10b      	bne.n	8001516 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80014fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001500:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001504:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001506:	698e      	ldr	r6, [r1, #24]
 8001508:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800150a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800150e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001510:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001514:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001516:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001518:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800151a:	684a      	ldr	r2, [r1, #4]
 800151c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800151e:	6203      	str	r3, [r0, #32]
 8001520:	bd70      	pop	{r4, r5, r6, pc}
 8001522:	bf00      	nop
 8001524:	40012c00 	.word	0x40012c00

08001528 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001528:	6a03      	ldr	r3, [r0, #32]
{
 800152a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800152c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001530:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001532:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001534:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001536:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001538:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800153a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800153e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001540:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001542:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001546:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800154a:	4d0b      	ldr	r5, [pc, #44]	; (8001578 <TIM_OC3_SetConfig+0x50>)
 800154c:	42a8      	cmp	r0, r5
 800154e:	d10d      	bne.n	800156c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001550:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001556:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800155a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800155c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800155e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001562:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001568:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800156c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800156e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001570:	684a      	ldr	r2, [r1, #4]
 8001572:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001574:	6203      	str	r3, [r0, #32]
 8001576:	bd70      	pop	{r4, r5, r6, pc}
 8001578:	40012c00 	.word	0x40012c00

0800157c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800157c:	6a03      	ldr	r3, [r0, #32]
{
 800157e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001584:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001586:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001588:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800158a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800158c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800158e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001592:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001596:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800159c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015a0:	4d06      	ldr	r5, [pc, #24]	; (80015bc <TIM_OC4_SetConfig+0x40>)
 80015a2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015a4:	bf02      	ittt	eq
 80015a6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80015a8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015ac:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80015b4:	684a      	ldr	r2, [r1, #4]
 80015b6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015b8:	6203      	str	r3, [r0, #32]
 80015ba:	bd30      	pop	{r4, r5, pc}
 80015bc:	40012c00 	.word	0x40012c00

080015c0 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80015c0:	2302      	movs	r3, #2
 80015c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015c6:	6803      	ldr	r3, [r0, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015ce:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80015d0:	bf1e      	ittt	ne
 80015d2:	681a      	ldrne	r2, [r3, #0]
 80015d4:	f042 0201 	orrne.w	r2, r2, #1
 80015d8:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80015da:	2301      	movs	r3, #1
 80015dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80015e0:	2000      	movs	r0, #0
 80015e2:	4770      	bx	lr

080015e4 <HAL_TIM_PWM_MspInit>:
 80015e4:	4770      	bx	lr
	...

080015e8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80015ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015ec:	4290      	cmp	r0, r2
 80015ee:	d00a      	beq.n	8001606 <TIM_Base_SetConfig+0x1e>
 80015f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015f4:	d007      	beq.n	8001606 <TIM_Base_SetConfig+0x1e>
 80015f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80015fa:	4290      	cmp	r0, r2
 80015fc:	d003      	beq.n	8001606 <TIM_Base_SetConfig+0x1e>
 80015fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001602:	4290      	cmp	r0, r2
 8001604:	d115      	bne.n	8001632 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001606:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800160c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <TIM_Base_SetConfig+0x6c>)
 8001610:	4290      	cmp	r0, r2
 8001612:	d00a      	beq.n	800162a <TIM_Base_SetConfig+0x42>
 8001614:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001618:	d007      	beq.n	800162a <TIM_Base_SetConfig+0x42>
 800161a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800161e:	4290      	cmp	r0, r2
 8001620:	d003      	beq.n	800162a <TIM_Base_SetConfig+0x42>
 8001622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001626:	4290      	cmp	r0, r2
 8001628:	d103      	bne.n	8001632 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800162a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800162c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001630:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001632:	694a      	ldr	r2, [r1, #20]
 8001634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001638:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800163a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800163c:	688b      	ldr	r3, [r1, #8]
 800163e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001640:	680b      	ldr	r3, [r1, #0]
 8001642:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <TIM_Base_SetConfig+0x6c>)
 8001646:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001648:	bf04      	itt	eq
 800164a:	690b      	ldreq	r3, [r1, #16]
 800164c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800164e:	2301      	movs	r3, #1
 8001650:	6143      	str	r3, [r0, #20]
 8001652:	4770      	bx	lr
 8001654:	40012c00 	.word	0x40012c00

08001658 <HAL_TIM_Base_Init>:
{
 8001658:	b510      	push	{r4, lr}
  if (htim == NULL)
 800165a:	4604      	mov	r4, r0
 800165c:	b1a0      	cbz	r0, 8001688 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800165e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001662:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001666:	b91b      	cbnz	r3, 8001670 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001668:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800166c:	f7ff f95c 	bl	8000928 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001670:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001672:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001678:	1d21      	adds	r1, r4, #4
 800167a:	f7ff ffb5 	bl	80015e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800167e:	2301      	movs	r3, #1
  return HAL_OK;
 8001680:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001682:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001686:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001688:	2001      	movs	r0, #1
}
 800168a:	bd10      	pop	{r4, pc}

0800168c <HAL_TIM_PWM_Init>:
{
 800168c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800168e:	4604      	mov	r4, r0
 8001690:	b1a0      	cbz	r0, 80016bc <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001692:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001696:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800169a:	b91b      	cbnz	r3, 80016a4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800169c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80016a0:	f7ff ffa0 	bl	80015e4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80016a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80016a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ac:	1d21      	adds	r1, r4, #4
 80016ae:	f7ff ff9b 	bl	80015e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80016b2:	2301      	movs	r3, #1
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80016b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
}
 80016be:	bd10      	pop	{r4, pc}

080016c0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016c0:	6a03      	ldr	r3, [r0, #32]
{
 80016c2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016c4:	f023 0310 	bic.w	r3, r3, #16
 80016c8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80016ca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80016cc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80016ce:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016d2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80016dc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016e4:	4d0b      	ldr	r5, [pc, #44]	; (8001714 <TIM_OC2_SetConfig+0x54>)
 80016e6:	42a8      	cmp	r0, r5
 80016e8:	d10d      	bne.n	8001706 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016ea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80016ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016f4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80016f6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80016f8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016fc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80016fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001702:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001706:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001708:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800170a:	684a      	ldr	r2, [r1, #4]
 800170c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800170e:	6203      	str	r3, [r0, #32]
 8001710:	bd70      	pop	{r4, r5, r6, pc}
 8001712:	bf00      	nop
 8001714:	40012c00 	.word	0x40012c00

08001718 <HAL_TIM_PWM_ConfigChannel>:
{
 8001718:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800171a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800171e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001720:	2b01      	cmp	r3, #1
 8001722:	f04f 0002 	mov.w	r0, #2
 8001726:	d025      	beq.n	8001774 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001728:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800172a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800172e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001732:	2a0c      	cmp	r2, #12
 8001734:	d818      	bhi.n	8001768 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001736:	e8df f002 	tbb	[pc, r2]
 800173a:	1707      	.short	0x1707
 800173c:	171e1717 	.word	0x171e1717
 8001740:	172f1717 	.word	0x172f1717
 8001744:	1717      	.short	0x1717
 8001746:	40          	.byte	0x40
 8001747:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001748:	6820      	ldr	r0, [r4, #0]
 800174a:	f7ff fec5 	bl	80014d8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800174e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001750:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	f042 0208 	orr.w	r2, r2, #8
 8001758:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	f022 0204 	bic.w	r2, r2, #4
 8001760:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001766:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001768:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800176a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800176c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001770:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001774:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001776:	6820      	ldr	r0, [r4, #0]
 8001778:	f7ff ffa2 	bl	80016c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800177c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800177e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001796:	e7e6      	b.n	8001766 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	f7ff fec5 	bl	8001528 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800179e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80017a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	f042 0208 	orr.w	r2, r2, #8
 80017a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	f022 0204 	bic.w	r2, r2, #4
 80017b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80017b6:	61da      	str	r2, [r3, #28]
      break;
 80017b8:	e7d6      	b.n	8001768 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80017ba:	6820      	ldr	r0, [r4, #0]
 80017bc:	f7ff fede 	bl	800157c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80017c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80017cc:	69da      	ldr	r2, [r3, #28]
 80017ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017da:	e7ec      	b.n	80017b6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080017dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80017dc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80017de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017e0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80017ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017ec:	6083      	str	r3, [r0, #8]
 80017ee:	bd10      	pop	{r4, pc}

080017f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80017f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80017f6:	2b01      	cmp	r3, #1
{
 80017f8:	4604      	mov	r4, r0
 80017fa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80017fe:	d019      	beq.n	8001834 <HAL_TIM_ConfigClockSource+0x44>
 8001800:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001802:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001806:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001808:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800180c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800180e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001812:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001816:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001818:	680b      	ldr	r3, [r1, #0]
 800181a:	2b40      	cmp	r3, #64	; 0x40
 800181c:	d065      	beq.n	80018ea <HAL_TIM_ConfigClockSource+0xfa>
 800181e:	d815      	bhi.n	800184c <HAL_TIM_ConfigClockSource+0x5c>
 8001820:	2b10      	cmp	r3, #16
 8001822:	d00c      	beq.n	800183e <HAL_TIM_ConfigClockSource+0x4e>
 8001824:	d807      	bhi.n	8001836 <HAL_TIM_ConfigClockSource+0x46>
 8001826:	b153      	cbz	r3, 800183e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001828:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800182a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800182c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001830:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001834:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001836:	2b20      	cmp	r3, #32
 8001838:	d001      	beq.n	800183e <HAL_TIM_ConfigClockSource+0x4e>
 800183a:	2b30      	cmp	r3, #48	; 0x30
 800183c:	d1f4      	bne.n	8001828 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800183e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001840:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001844:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001848:	4313      	orrs	r3, r2
 800184a:	e01a      	b.n	8001882 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800184c:	2b60      	cmp	r3, #96	; 0x60
 800184e:	d034      	beq.n	80018ba <HAL_TIM_ConfigClockSource+0xca>
 8001850:	d819      	bhi.n	8001886 <HAL_TIM_ConfigClockSource+0x96>
 8001852:	2b50      	cmp	r3, #80	; 0x50
 8001854:	d1e8      	bne.n	8001828 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001856:	684a      	ldr	r2, [r1, #4]
 8001858:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800185a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800185c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800185e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001862:	f025 0501 	bic.w	r5, r5, #1
 8001866:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001868:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800186a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800186c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001870:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001874:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001876:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001878:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800187a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800187e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001882:	6083      	str	r3, [r0, #8]
 8001884:	e7d0      	b.n	8001828 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001886:	2b70      	cmp	r3, #112	; 0x70
 8001888:	d00c      	beq.n	80018a4 <HAL_TIM_ConfigClockSource+0xb4>
 800188a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188e:	d1cb      	bne.n	8001828 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001890:	68cb      	ldr	r3, [r1, #12]
 8001892:	684a      	ldr	r2, [r1, #4]
 8001894:	6889      	ldr	r1, [r1, #8]
 8001896:	f7ff ffa1 	bl	80017dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	6893      	ldr	r3, [r2, #8]
 800189e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a2:	e008      	b.n	80018b6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80018a4:	68cb      	ldr	r3, [r1, #12]
 80018a6:	684a      	ldr	r2, [r1, #4]
 80018a8:	6889      	ldr	r1, [r1, #8]
 80018aa:	f7ff ff97 	bl	80017dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80018ae:	6822      	ldr	r2, [r4, #0]
 80018b0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018b6:	6093      	str	r3, [r2, #8]
      break;
 80018b8:	e7b6      	b.n	8001828 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018ba:	684d      	ldr	r5, [r1, #4]
 80018bc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018be:	6a01      	ldr	r1, [r0, #32]
 80018c0:	f021 0110 	bic.w	r1, r1, #16
 80018c4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018c6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80018c8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018ca:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80018d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018d6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80018da:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80018dc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80018de:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018e4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80018e8:	e7cb      	b.n	8001882 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ea:	684a      	ldr	r2, [r1, #4]
 80018ec:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80018ee:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018f0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018f2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018f6:	f025 0501 	bic.w	r5, r5, #1
 80018fa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018fc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80018fe:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001904:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001908:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800190a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800190c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800190e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001912:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001916:	e7b4      	b.n	8001882 <HAL_TIM_ConfigClockSource+0x92>

08001918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001918:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800191a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800191c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800191e:	f001 011f 	and.w	r1, r1, #31
 8001922:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001924:	ea23 0304 	bic.w	r3, r3, r4
 8001928:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800192a:	6a03      	ldr	r3, [r0, #32]
 800192c:	408a      	lsls	r2, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	6202      	str	r2, [r0, #32]
 8001932:	bd10      	pop	{r4, pc}

08001934 <HAL_TIM_PWM_Start>:
{
 8001934:	b510      	push	{r4, lr}
 8001936:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001938:	2201      	movs	r2, #1
 800193a:	6800      	ldr	r0, [r0, #0]
 800193c:	f7ff ffec 	bl	8001918 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_TIM_PWM_Start+0x34>)
}
 8001944:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001946:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001948:	bf02      	ittt	eq
 800194a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800194c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001950:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001958:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800195a:	bf1e      	ittt	ne
 800195c:	681a      	ldrne	r2, [r3, #0]
 800195e:	f042 0201 	orrne.w	r2, r2, #1
 8001962:	601a      	strne	r2, [r3, #0]
}
 8001964:	bd10      	pop	{r4, pc}
 8001966:	bf00      	nop
 8001968:	40012c00 	.word	0x40012c00

0800196c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800196c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001970:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001972:	2b01      	cmp	r3, #1
 8001974:	f04f 0302 	mov.w	r3, #2
 8001978:	d014      	beq.n	80019a4 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800197a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800197c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001980:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001982:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001984:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001986:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001988:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800198c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001990:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001992:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001994:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001996:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001998:	2301      	movs	r3, #1
 800199a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800199e:	2300      	movs	r3, #0
 80019a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80019a4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80019a6:	bd30      	pop	{r4, r5, pc}

080019a8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019a8:	6803      	ldr	r3, [r0, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019ba:	2320      	movs	r3, #32
 80019bc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80019c0:	4770      	bx	lr
	...

080019c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019c8:	6803      	ldr	r3, [r0, #0]
 80019ca:	68c1      	ldr	r1, [r0, #12]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	2419      	movs	r4, #25
 80019d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80019d4:	430a      	orrs	r2, r1
 80019d6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019d8:	6882      	ldr	r2, [r0, #8]
 80019da:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80019dc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019de:	4302      	orrs	r2, r0
 80019e0:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80019e2:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80019e6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019ea:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	69a9      	ldr	r1, [r5, #24]
 80019f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019f8:	430a      	orrs	r2, r1
 80019fa:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <UART_SetConfig+0x70>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d114      	bne.n	8001a2c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a02:	f7ff fd59 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a06:	4360      	muls	r0, r4
 8001a08:	686c      	ldr	r4, [r5, #4]
 8001a0a:	2264      	movs	r2, #100	; 0x64
 8001a0c:	00a4      	lsls	r4, r4, #2
 8001a0e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001a12:	fbb0 f4f2 	udiv	r4, r0, r2
 8001a16:	fb02 0314 	mls	r3, r2, r4, r0
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	3332      	adds	r3, #50	; 0x32
 8001a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a22:	6829      	ldr	r1, [r5, #0]
 8001a24:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001a28:	608b      	str	r3, [r1, #8]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a2c:	f7ff fd34 	bl	8001498 <HAL_RCC_GetPCLK1Freq>
 8001a30:	e7e9      	b.n	8001a06 <UART_SetConfig+0x42>
 8001a32:	bf00      	nop
 8001a34:	40013800 	.word	0x40013800

08001a38 <HAL_UART_Init>:
{
 8001a38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	b340      	cbz	r0, 8001a90 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a46:	b91b      	cbnz	r3, 8001a50 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a48:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a4c:	f7ff f83c 	bl	8000ac8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a50:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001a52:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a58:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a5a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a60:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a62:	f7ff ffaf 	bl	80019c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a66:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a68:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a78:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a80:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001a82:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a84:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001a8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a90:	2001      	movs	r0, #1
}
 8001a92:	bd10      	pop	{r4, pc}

08001a94 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001a94:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d118      	bne.n	8001ace <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8001a9c:	b1a9      	cbz	r1, 8001aca <HAL_UART_Transmit_IT+0x36>
 8001a9e:	b1a2      	cbz	r2, 8001aca <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001aa0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d012      	beq.n	8001ace <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001aa8:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 8001aaa:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aac:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aae:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8001ab0:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ab2:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ab6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001aba:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8001abc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ac0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ac4:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	4770      	bx	lr
      return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
 8001acc:	4770      	bx	lr
    return HAL_BUSY;
 8001ace:	2002      	movs	r0, #2
}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ad2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	d120      	bne.n	8001b1c <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001ada:	b1e9      	cbz	r1, 8001b18 <HAL_UART_Receive_IT+0x46>
 8001adc:	b1e2      	cbz	r2, 8001b18 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001ade:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d01a      	beq.n	8001b1c <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001ae6:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001ae8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aea:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001aec:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aee:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001af0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001af4:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001af6:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001af8:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001afa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001afe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001b02:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b04:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001b06:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b08:	f041 0101 	orr.w	r1, r1, #1
 8001b0c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001b0e:	68d1      	ldr	r1, [r2, #12]
 8001b10:	f041 0120 	orr.w	r1, r1, #32
 8001b14:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001b16:	4770      	bx	lr
      return HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	4770      	bx	lr
    return HAL_BUSY;
 8001b1c:	2002      	movs	r0, #2
}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_UART_TxCpltCallback>:
 8001b20:	4770      	bx	lr

08001b22 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b22:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001b26:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b28:	2b22      	cmp	r3, #34	; 0x22
 8001b2a:	d136      	bne.n	8001b9a <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b2c:	6883      	ldr	r3, [r0, #8]
 8001b2e:	6901      	ldr	r1, [r0, #16]
 8001b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b34:	6802      	ldr	r2, [r0, #0]
 8001b36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b38:	d123      	bne.n	8001b82 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b3a:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b3c:	b9e9      	cbnz	r1, 8001b7a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b42:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001b46:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001b48:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001b4a:	3c01      	subs	r4, #1
 8001b4c:	b2a4      	uxth	r4, r4
 8001b4e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001b50:	b98c      	cbnz	r4, 8001b76 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b52:	6803      	ldr	r3, [r0, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	f022 0220 	bic.w	r2, r2, #32
 8001b5a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b62:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001b72:	f7fe fce7 	bl	8000544 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001b76:	2000      	movs	r0, #0
}
 8001b78:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f823 2b01 	strh.w	r2, [r3], #1
 8001b80:	e7e1      	b.n	8001b46 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b82:	b921      	cbnz	r1, 8001b8e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b84:	1c59      	adds	r1, r3, #1
 8001b86:	6852      	ldr	r2, [r2, #4]
 8001b88:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e7dc      	b.n	8001b48 <UART_Receive_IT+0x26>
 8001b8e:	6852      	ldr	r2, [r2, #4]
 8001b90:	1c59      	adds	r1, r3, #1
 8001b92:	6281      	str	r1, [r0, #40]	; 0x28
 8001b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b98:	e7f7      	b.n	8001b8a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	bd10      	pop	{r4, pc}

08001b9e <HAL_UART_ErrorCallback>:
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ba0:	6803      	ldr	r3, [r0, #0]
{
 8001ba2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ba4:	681a      	ldr	r2, [r3, #0]
{
 8001ba6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001ba8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001baa:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bac:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001bae:	d107      	bne.n	8001bc0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bb0:	0696      	lsls	r6, r2, #26
 8001bb2:	d55a      	bpl.n	8001c6a <HAL_UART_IRQHandler+0xca>
 8001bb4:	068d      	lsls	r5, r1, #26
 8001bb6:	d558      	bpl.n	8001c6a <HAL_UART_IRQHandler+0xca>
}
 8001bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001bbc:	f7ff bfb1 	b.w	8001b22 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bc0:	f015 0501 	ands.w	r5, r5, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_UART_IRQHandler+0x2c>
 8001bc6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001bca:	d04e      	beq.n	8001c6a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bcc:	07d3      	lsls	r3, r2, #31
 8001bce:	d505      	bpl.n	8001bdc <HAL_UART_IRQHandler+0x3c>
 8001bd0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bd2:	bf42      	ittt	mi
 8001bd4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001bd6:	f043 0301 	orrmi.w	r3, r3, #1
 8001bda:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bdc:	0750      	lsls	r0, r2, #29
 8001bde:	d504      	bpl.n	8001bea <HAL_UART_IRQHandler+0x4a>
 8001be0:	b11d      	cbz	r5, 8001bea <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001be2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bea:	0793      	lsls	r3, r2, #30
 8001bec:	d504      	bpl.n	8001bf8 <HAL_UART_IRQHandler+0x58>
 8001bee:	b11d      	cbz	r5, 8001bf8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bf8:	0716      	lsls	r6, r2, #28
 8001bfa:	d504      	bpl.n	8001c06 <HAL_UART_IRQHandler+0x66>
 8001bfc:	b11d      	cbz	r5, 8001c06 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d066      	beq.n	8001cda <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c0c:	0695      	lsls	r5, r2, #26
 8001c0e:	d504      	bpl.n	8001c1a <HAL_UART_IRQHandler+0x7a>
 8001c10:	0688      	lsls	r0, r1, #26
 8001c12:	d502      	bpl.n	8001c1a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff ff84 	bl	8001b22 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c1a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001c1c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c1e:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c22:	0711      	lsls	r1, r2, #28
 8001c24:	d402      	bmi.n	8001c2c <HAL_UART_IRQHandler+0x8c>
 8001c26:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001c2a:	d01a      	beq.n	8001c62 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001c2c:	f7ff febc 	bl	80019a8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	0652      	lsls	r2, r2, #25
 8001c36:	d510      	bpl.n	8001c5a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c38:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001c3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c40:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001c42:	b150      	cbz	r0, 8001c5a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_UART_IRQHandler+0x13c>)
 8001c46:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c48:	f7ff f86c 	bl	8000d24 <HAL_DMA_Abort_IT>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d044      	beq.n	8001cda <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c50:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c58:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ff9f 	bl	8001b9e <HAL_UART_ErrorCallback>
 8001c60:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001c62:	f7ff ff9c 	bl	8001b9e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c66:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001c68:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c6a:	0616      	lsls	r6, r2, #24
 8001c6c:	d527      	bpl.n	8001cbe <HAL_UART_IRQHandler+0x11e>
 8001c6e:	060d      	lsls	r5, r1, #24
 8001c70:	d525      	bpl.n	8001cbe <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c72:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001c76:	2a21      	cmp	r2, #33	; 0x21
 8001c78:	d12f      	bne.n	8001cda <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c7a:	68a2      	ldr	r2, [r4, #8]
 8001c7c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c80:	6a22      	ldr	r2, [r4, #32]
 8001c82:	d117      	bne.n	8001cb4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c84:	8811      	ldrh	r1, [r2, #0]
 8001c86:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001c8a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001c8c:	6921      	ldr	r1, [r4, #16]
 8001c8e:	b979      	cbnz	r1, 8001cb0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001c90:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001c92:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001c94:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001c96:	3a01      	subs	r2, #1
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001c9c:	b9ea      	cbnz	r2, 8001cda <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001cb0:	3201      	adds	r2, #1
 8001cb2:	e7ee      	b.n	8001c92 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001cb4:	1c51      	adds	r1, r2, #1
 8001cb6:	6221      	str	r1, [r4, #32]
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	e7ea      	b.n	8001c94 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cbe:	0650      	lsls	r0, r2, #25
 8001cc0:	d50b      	bpl.n	8001cda <HAL_UART_IRQHandler+0x13a>
 8001cc2:	064a      	lsls	r2, r1, #25
 8001cc4:	d509      	bpl.n	8001cda <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cc6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001cc8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cce:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001cd6:	f7ff ff23 	bl	8001b20 <HAL_UART_TxCpltCallback>
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
 8001cdc:	08001ce1 	.word	0x08001ce1

08001ce0 <UART_DMAAbortOnError>:
{
 8001ce0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001ce2:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ce4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001ce6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ce8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001cea:	f7ff ff58 	bl	8001b9e <HAL_UART_ErrorCallback>
 8001cee:	bd08      	pop	{r3, pc}

08001cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cf0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cf2:	e003      	b.n	8001cfc <LoopCopyDataInit>

08001cf4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cf6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cf8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cfa:	3104      	adds	r1, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cfc:	480a      	ldr	r0, [pc, #40]	; (8001d28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d04:	d3f6      	bcc.n	8001cf4 <CopyDataInit>
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d08:	e002      	b.n	8001d10 <LoopFillZerobss>

08001d0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d0c:	f842 3b04 	str.w	r3, [r2], #4

08001d10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d14:	d3f9      	bcc.n	8001d0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d16:	f7fe fdab 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f000 f815 	bl	8001d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1e:	f7fe fc89 	bl	8000634 <main>
  bx lr
 8001d22:	4770      	bx	lr
  ldr r3, =_sidata
 8001d24:	080026bc 	.word	0x080026bc
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d2c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001d30:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001d34:	20000260 	.word	0x20000260

08001d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_2_IRQHandler>
	...

08001d3c <__errno>:
 8001d3c:	4b01      	ldr	r3, [pc, #4]	; (8001d44 <__errno+0x8>)
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2000000c 	.word	0x2000000c

08001d48 <__libc_init_array>:
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	2500      	movs	r5, #0
 8001d4c:	4e0c      	ldr	r6, [pc, #48]	; (8001d80 <__libc_init_array+0x38>)
 8001d4e:	4c0d      	ldr	r4, [pc, #52]	; (8001d84 <__libc_init_array+0x3c>)
 8001d50:	1ba4      	subs	r4, r4, r6
 8001d52:	10a4      	asrs	r4, r4, #2
 8001d54:	42a5      	cmp	r5, r4
 8001d56:	d109      	bne.n	8001d6c <__libc_init_array+0x24>
 8001d58:	f000 fc4e 	bl	80025f8 <_init>
 8001d5c:	2500      	movs	r5, #0
 8001d5e:	4e0a      	ldr	r6, [pc, #40]	; (8001d88 <__libc_init_array+0x40>)
 8001d60:	4c0a      	ldr	r4, [pc, #40]	; (8001d8c <__libc_init_array+0x44>)
 8001d62:	1ba4      	subs	r4, r4, r6
 8001d64:	10a4      	asrs	r4, r4, #2
 8001d66:	42a5      	cmp	r5, r4
 8001d68:	d105      	bne.n	8001d76 <__libc_init_array+0x2e>
 8001d6a:	bd70      	pop	{r4, r5, r6, pc}
 8001d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d70:	4798      	blx	r3
 8001d72:	3501      	adds	r5, #1
 8001d74:	e7ee      	b.n	8001d54 <__libc_init_array+0xc>
 8001d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d7a:	4798      	blx	r3
 8001d7c:	3501      	adds	r5, #1
 8001d7e:	e7f2      	b.n	8001d66 <__libc_init_array+0x1e>
 8001d80:	080026b4 	.word	0x080026b4
 8001d84:	080026b4 	.word	0x080026b4
 8001d88:	080026b4 	.word	0x080026b4
 8001d8c:	080026b8 	.word	0x080026b8

08001d90 <memset>:
 8001d90:	4603      	mov	r3, r0
 8001d92:	4402      	add	r2, r0
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d100      	bne.n	8001d9a <memset+0xa>
 8001d98:	4770      	bx	lr
 8001d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d9e:	e7f9      	b.n	8001d94 <memset+0x4>

08001da0 <siprintf>:
 8001da0:	b40e      	push	{r1, r2, r3}
 8001da2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001da6:	b500      	push	{lr}
 8001da8:	b09c      	sub	sp, #112	; 0x70
 8001daa:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001dae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001db2:	9104      	str	r1, [sp, #16]
 8001db4:	9107      	str	r1, [sp, #28]
 8001db6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001dba:	ab1d      	add	r3, sp, #116	; 0x74
 8001dbc:	9002      	str	r0, [sp, #8]
 8001dbe:	9006      	str	r0, [sp, #24]
 8001dc0:	4808      	ldr	r0, [pc, #32]	; (8001de4 <siprintf+0x44>)
 8001dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dc6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001dca:	6800      	ldr	r0, [r0, #0]
 8001dcc:	a902      	add	r1, sp, #8
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	f000 f866 	bl	8001ea0 <_svfiprintf_r>
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	9b02      	ldr	r3, [sp, #8]
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	b01c      	add	sp, #112	; 0x70
 8001ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001de0:	b003      	add	sp, #12
 8001de2:	4770      	bx	lr
 8001de4:	2000000c 	.word	0x2000000c

08001de8 <__ssputs_r>:
 8001de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dec:	688e      	ldr	r6, [r1, #8]
 8001dee:	4682      	mov	sl, r0
 8001df0:	429e      	cmp	r6, r3
 8001df2:	460c      	mov	r4, r1
 8001df4:	4691      	mov	r9, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	d835      	bhi.n	8001e66 <__ssputs_r+0x7e>
 8001dfa:	898a      	ldrh	r2, [r1, #12]
 8001dfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e00:	d031      	beq.n	8001e66 <__ssputs_r+0x7e>
 8001e02:	2302      	movs	r3, #2
 8001e04:	6825      	ldr	r5, [r4, #0]
 8001e06:	6909      	ldr	r1, [r1, #16]
 8001e08:	1a6f      	subs	r7, r5, r1
 8001e0a:	6965      	ldr	r5, [r4, #20]
 8001e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e10:	fb95 f5f3 	sdiv	r5, r5, r3
 8001e14:	f108 0301 	add.w	r3, r8, #1
 8001e18:	443b      	add	r3, r7
 8001e1a:	429d      	cmp	r5, r3
 8001e1c:	bf38      	it	cc
 8001e1e:	461d      	movcc	r5, r3
 8001e20:	0553      	lsls	r3, r2, #21
 8001e22:	d531      	bpl.n	8001e88 <__ssputs_r+0xa0>
 8001e24:	4629      	mov	r1, r5
 8001e26:	f000 fb47 	bl	80024b8 <_malloc_r>
 8001e2a:	4606      	mov	r6, r0
 8001e2c:	b950      	cbnz	r0, 8001e44 <__ssputs_r+0x5c>
 8001e2e:	230c      	movs	r3, #12
 8001e30:	f8ca 3000 	str.w	r3, [sl]
 8001e34:	89a3      	ldrh	r3, [r4, #12]
 8001e36:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e44:	463a      	mov	r2, r7
 8001e46:	6921      	ldr	r1, [r4, #16]
 8001e48:	f000 fac4 	bl	80023d4 <memcpy>
 8001e4c:	89a3      	ldrh	r3, [r4, #12]
 8001e4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e56:	81a3      	strh	r3, [r4, #12]
 8001e58:	6126      	str	r6, [r4, #16]
 8001e5a:	443e      	add	r6, r7
 8001e5c:	6026      	str	r6, [r4, #0]
 8001e5e:	4646      	mov	r6, r8
 8001e60:	6165      	str	r5, [r4, #20]
 8001e62:	1bed      	subs	r5, r5, r7
 8001e64:	60a5      	str	r5, [r4, #8]
 8001e66:	4546      	cmp	r6, r8
 8001e68:	bf28      	it	cs
 8001e6a:	4646      	movcs	r6, r8
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	4632      	mov	r2, r6
 8001e70:	6820      	ldr	r0, [r4, #0]
 8001e72:	f000 faba 	bl	80023ea <memmove>
 8001e76:	68a3      	ldr	r3, [r4, #8]
 8001e78:	2000      	movs	r0, #0
 8001e7a:	1b9b      	subs	r3, r3, r6
 8001e7c:	60a3      	str	r3, [r4, #8]
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	441e      	add	r6, r3
 8001e82:	6026      	str	r6, [r4, #0]
 8001e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e88:	462a      	mov	r2, r5
 8001e8a:	f000 fb73 	bl	8002574 <_realloc_r>
 8001e8e:	4606      	mov	r6, r0
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d1e1      	bne.n	8001e58 <__ssputs_r+0x70>
 8001e94:	6921      	ldr	r1, [r4, #16]
 8001e96:	4650      	mov	r0, sl
 8001e98:	f000 fac2 	bl	8002420 <_free_r>
 8001e9c:	e7c7      	b.n	8001e2e <__ssputs_r+0x46>
	...

08001ea0 <_svfiprintf_r>:
 8001ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea4:	b09d      	sub	sp, #116	; 0x74
 8001ea6:	9303      	str	r3, [sp, #12]
 8001ea8:	898b      	ldrh	r3, [r1, #12]
 8001eaa:	4680      	mov	r8, r0
 8001eac:	061c      	lsls	r4, r3, #24
 8001eae:	460d      	mov	r5, r1
 8001eb0:	4616      	mov	r6, r2
 8001eb2:	d50f      	bpl.n	8001ed4 <_svfiprintf_r+0x34>
 8001eb4:	690b      	ldr	r3, [r1, #16]
 8001eb6:	b96b      	cbnz	r3, 8001ed4 <_svfiprintf_r+0x34>
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	f000 fafd 	bl	80024b8 <_malloc_r>
 8001ebe:	6028      	str	r0, [r5, #0]
 8001ec0:	6128      	str	r0, [r5, #16]
 8001ec2:	b928      	cbnz	r0, 8001ed0 <_svfiprintf_r+0x30>
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	f8c8 3000 	str.w	r3, [r8]
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ece:	e0c4      	b.n	800205a <_svfiprintf_r+0x1ba>
 8001ed0:	2340      	movs	r3, #64	; 0x40
 8001ed2:	616b      	str	r3, [r5, #20]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ed8:	2320      	movs	r3, #32
 8001eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ede:	2330      	movs	r3, #48	; 0x30
 8001ee0:	f04f 0b01 	mov.w	fp, #1
 8001ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ee8:	4637      	mov	r7, r6
 8001eea:	463c      	mov	r4, r7
 8001eec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d13c      	bne.n	8001f6e <_svfiprintf_r+0xce>
 8001ef4:	ebb7 0a06 	subs.w	sl, r7, r6
 8001ef8:	d00b      	beq.n	8001f12 <_svfiprintf_r+0x72>
 8001efa:	4653      	mov	r3, sl
 8001efc:	4632      	mov	r2, r6
 8001efe:	4629      	mov	r1, r5
 8001f00:	4640      	mov	r0, r8
 8001f02:	f7ff ff71 	bl	8001de8 <__ssputs_r>
 8001f06:	3001      	adds	r0, #1
 8001f08:	f000 80a2 	beq.w	8002050 <_svfiprintf_r+0x1b0>
 8001f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f0e:	4453      	add	r3, sl
 8001f10:	9309      	str	r3, [sp, #36]	; 0x24
 8001f12:	783b      	ldrb	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 809b 	beq.w	8002050 <_svfiprintf_r+0x1b0>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	9304      	str	r3, [sp, #16]
 8001f22:	9307      	str	r3, [sp, #28]
 8001f24:	9205      	str	r2, [sp, #20]
 8001f26:	9306      	str	r3, [sp, #24]
 8001f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8001f2e:	2205      	movs	r2, #5
 8001f30:	7821      	ldrb	r1, [r4, #0]
 8001f32:	4850      	ldr	r0, [pc, #320]	; (8002074 <_svfiprintf_r+0x1d4>)
 8001f34:	f000 fa40 	bl	80023b8 <memchr>
 8001f38:	1c67      	adds	r7, r4, #1
 8001f3a:	9b04      	ldr	r3, [sp, #16]
 8001f3c:	b9d8      	cbnz	r0, 8001f76 <_svfiprintf_r+0xd6>
 8001f3e:	06d9      	lsls	r1, r3, #27
 8001f40:	bf44      	itt	mi
 8001f42:	2220      	movmi	r2, #32
 8001f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f48:	071a      	lsls	r2, r3, #28
 8001f4a:	bf44      	itt	mi
 8001f4c:	222b      	movmi	r2, #43	; 0x2b
 8001f4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f52:	7822      	ldrb	r2, [r4, #0]
 8001f54:	2a2a      	cmp	r2, #42	; 0x2a
 8001f56:	d016      	beq.n	8001f86 <_svfiprintf_r+0xe6>
 8001f58:	2100      	movs	r1, #0
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	9a07      	ldr	r2, [sp, #28]
 8001f5e:	4627      	mov	r7, r4
 8001f60:	783b      	ldrb	r3, [r7, #0]
 8001f62:	3401      	adds	r4, #1
 8001f64:	3b30      	subs	r3, #48	; 0x30
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	d950      	bls.n	800200c <_svfiprintf_r+0x16c>
 8001f6a:	b1c9      	cbz	r1, 8001fa0 <_svfiprintf_r+0x100>
 8001f6c:	e011      	b.n	8001f92 <_svfiprintf_r+0xf2>
 8001f6e:	2b25      	cmp	r3, #37	; 0x25
 8001f70:	d0c0      	beq.n	8001ef4 <_svfiprintf_r+0x54>
 8001f72:	4627      	mov	r7, r4
 8001f74:	e7b9      	b.n	8001eea <_svfiprintf_r+0x4a>
 8001f76:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <_svfiprintf_r+0x1d4>)
 8001f78:	463c      	mov	r4, r7
 8001f7a:	1a80      	subs	r0, r0, r2
 8001f7c:	fa0b f000 	lsl.w	r0, fp, r0
 8001f80:	4318      	orrs	r0, r3
 8001f82:	9004      	str	r0, [sp, #16]
 8001f84:	e7d3      	b.n	8001f2e <_svfiprintf_r+0x8e>
 8001f86:	9a03      	ldr	r2, [sp, #12]
 8001f88:	1d11      	adds	r1, r2, #4
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	9103      	str	r1, [sp, #12]
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	db01      	blt.n	8001f96 <_svfiprintf_r+0xf6>
 8001f92:	9207      	str	r2, [sp, #28]
 8001f94:	e004      	b.n	8001fa0 <_svfiprintf_r+0x100>
 8001f96:	4252      	negs	r2, r2
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	9207      	str	r2, [sp, #28]
 8001f9e:	9304      	str	r3, [sp, #16]
 8001fa0:	783b      	ldrb	r3, [r7, #0]
 8001fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8001fa4:	d10d      	bne.n	8001fc2 <_svfiprintf_r+0x122>
 8001fa6:	787b      	ldrb	r3, [r7, #1]
 8001fa8:	1c79      	adds	r1, r7, #1
 8001faa:	2b2a      	cmp	r3, #42	; 0x2a
 8001fac:	d132      	bne.n	8002014 <_svfiprintf_r+0x174>
 8001fae:	9b03      	ldr	r3, [sp, #12]
 8001fb0:	3702      	adds	r7, #2
 8001fb2:	1d1a      	adds	r2, r3, #4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	9203      	str	r2, [sp, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bfb8      	it	lt
 8001fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fc0:	9305      	str	r3, [sp, #20]
 8001fc2:	4c2d      	ldr	r4, [pc, #180]	; (8002078 <_svfiprintf_r+0x1d8>)
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	7839      	ldrb	r1, [r7, #0]
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f000 f9f5 	bl	80023b8 <memchr>
 8001fce:	b138      	cbz	r0, 8001fe0 <_svfiprintf_r+0x140>
 8001fd0:	2340      	movs	r3, #64	; 0x40
 8001fd2:	1b00      	subs	r0, r0, r4
 8001fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8001fd8:	9b04      	ldr	r3, [sp, #16]
 8001fda:	3701      	adds	r7, #1
 8001fdc:	4303      	orrs	r3, r0
 8001fde:	9304      	str	r3, [sp, #16]
 8001fe0:	7839      	ldrb	r1, [r7, #0]
 8001fe2:	2206      	movs	r2, #6
 8001fe4:	4825      	ldr	r0, [pc, #148]	; (800207c <_svfiprintf_r+0x1dc>)
 8001fe6:	1c7e      	adds	r6, r7, #1
 8001fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fec:	f000 f9e4 	bl	80023b8 <memchr>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d035      	beq.n	8002060 <_svfiprintf_r+0x1c0>
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <_svfiprintf_r+0x1e0>)
 8001ff6:	b9fb      	cbnz	r3, 8002038 <_svfiprintf_r+0x198>
 8001ff8:	9b03      	ldr	r3, [sp, #12]
 8001ffa:	3307      	adds	r3, #7
 8001ffc:	f023 0307 	bic.w	r3, r3, #7
 8002000:	3308      	adds	r3, #8
 8002002:	9303      	str	r3, [sp, #12]
 8002004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002006:	444b      	add	r3, r9
 8002008:	9309      	str	r3, [sp, #36]	; 0x24
 800200a:	e76d      	b.n	8001ee8 <_svfiprintf_r+0x48>
 800200c:	fb00 3202 	mla	r2, r0, r2, r3
 8002010:	2101      	movs	r1, #1
 8002012:	e7a4      	b.n	8001f5e <_svfiprintf_r+0xbe>
 8002014:	2300      	movs	r3, #0
 8002016:	240a      	movs	r4, #10
 8002018:	4618      	mov	r0, r3
 800201a:	9305      	str	r3, [sp, #20]
 800201c:	460f      	mov	r7, r1
 800201e:	783a      	ldrb	r2, [r7, #0]
 8002020:	3101      	adds	r1, #1
 8002022:	3a30      	subs	r2, #48	; 0x30
 8002024:	2a09      	cmp	r2, #9
 8002026:	d903      	bls.n	8002030 <_svfiprintf_r+0x190>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ca      	beq.n	8001fc2 <_svfiprintf_r+0x122>
 800202c:	9005      	str	r0, [sp, #20]
 800202e:	e7c8      	b.n	8001fc2 <_svfiprintf_r+0x122>
 8002030:	fb04 2000 	mla	r0, r4, r0, r2
 8002034:	2301      	movs	r3, #1
 8002036:	e7f1      	b.n	800201c <_svfiprintf_r+0x17c>
 8002038:	ab03      	add	r3, sp, #12
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	462a      	mov	r2, r5
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <_svfiprintf_r+0x1e4>)
 8002040:	a904      	add	r1, sp, #16
 8002042:	4640      	mov	r0, r8
 8002044:	f3af 8000 	nop.w
 8002048:	f1b0 3fff 	cmp.w	r0, #4294967295
 800204c:	4681      	mov	r9, r0
 800204e:	d1d9      	bne.n	8002004 <_svfiprintf_r+0x164>
 8002050:	89ab      	ldrh	r3, [r5, #12]
 8002052:	065b      	lsls	r3, r3, #25
 8002054:	f53f af39 	bmi.w	8001eca <_svfiprintf_r+0x2a>
 8002058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800205a:	b01d      	add	sp, #116	; 0x74
 800205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002060:	ab03      	add	r3, sp, #12
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	462a      	mov	r2, r5
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <_svfiprintf_r+0x1e4>)
 8002068:	a904      	add	r1, sp, #16
 800206a:	4640      	mov	r0, r8
 800206c:	f000 f884 	bl	8002178 <_printf_i>
 8002070:	e7ea      	b.n	8002048 <_svfiprintf_r+0x1a8>
 8002072:	bf00      	nop
 8002074:	0800267f 	.word	0x0800267f
 8002078:	08002685 	.word	0x08002685
 800207c:	08002689 	.word	0x08002689
 8002080:	00000000 	.word	0x00000000
 8002084:	08001de9 	.word	0x08001de9

08002088 <_printf_common>:
 8002088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800208c:	4691      	mov	r9, r2
 800208e:	461f      	mov	r7, r3
 8002090:	688a      	ldr	r2, [r1, #8]
 8002092:	690b      	ldr	r3, [r1, #16]
 8002094:	4606      	mov	r6, r0
 8002096:	4293      	cmp	r3, r2
 8002098:	bfb8      	it	lt
 800209a:	4613      	movlt	r3, r2
 800209c:	f8c9 3000 	str.w	r3, [r9]
 80020a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020a4:	460c      	mov	r4, r1
 80020a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020aa:	b112      	cbz	r2, 80020b2 <_printf_common+0x2a>
 80020ac:	3301      	adds	r3, #1
 80020ae:	f8c9 3000 	str.w	r3, [r9]
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	0699      	lsls	r1, r3, #26
 80020b6:	bf42      	ittt	mi
 80020b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80020bc:	3302      	addmi	r3, #2
 80020be:	f8c9 3000 	strmi.w	r3, [r9]
 80020c2:	6825      	ldr	r5, [r4, #0]
 80020c4:	f015 0506 	ands.w	r5, r5, #6
 80020c8:	d107      	bne.n	80020da <_printf_common+0x52>
 80020ca:	f104 0a19 	add.w	sl, r4, #25
 80020ce:	68e3      	ldr	r3, [r4, #12]
 80020d0:	f8d9 2000 	ldr.w	r2, [r9]
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	429d      	cmp	r5, r3
 80020d8:	db2a      	blt.n	8002130 <_printf_common+0xa8>
 80020da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80020de:	6822      	ldr	r2, [r4, #0]
 80020e0:	3300      	adds	r3, #0
 80020e2:	bf18      	it	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	0692      	lsls	r2, r2, #26
 80020e8:	d42f      	bmi.n	800214a <_printf_common+0xc2>
 80020ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020ee:	4639      	mov	r1, r7
 80020f0:	4630      	mov	r0, r6
 80020f2:	47c0      	blx	r8
 80020f4:	3001      	adds	r0, #1
 80020f6:	d022      	beq.n	800213e <_printf_common+0xb6>
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	68e5      	ldr	r5, [r4, #12]
 80020fc:	f003 0306 	and.w	r3, r3, #6
 8002100:	2b04      	cmp	r3, #4
 8002102:	bf18      	it	ne
 8002104:	2500      	movne	r5, #0
 8002106:	f8d9 2000 	ldr.w	r2, [r9]
 800210a:	f04f 0900 	mov.w	r9, #0
 800210e:	bf08      	it	eq
 8002110:	1aad      	subeq	r5, r5, r2
 8002112:	68a3      	ldr	r3, [r4, #8]
 8002114:	6922      	ldr	r2, [r4, #16]
 8002116:	bf08      	it	eq
 8002118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800211c:	4293      	cmp	r3, r2
 800211e:	bfc4      	itt	gt
 8002120:	1a9b      	subgt	r3, r3, r2
 8002122:	18ed      	addgt	r5, r5, r3
 8002124:	341a      	adds	r4, #26
 8002126:	454d      	cmp	r5, r9
 8002128:	d11b      	bne.n	8002162 <_printf_common+0xda>
 800212a:	2000      	movs	r0, #0
 800212c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002130:	2301      	movs	r3, #1
 8002132:	4652      	mov	r2, sl
 8002134:	4639      	mov	r1, r7
 8002136:	4630      	mov	r0, r6
 8002138:	47c0      	blx	r8
 800213a:	3001      	adds	r0, #1
 800213c:	d103      	bne.n	8002146 <_printf_common+0xbe>
 800213e:	f04f 30ff 	mov.w	r0, #4294967295
 8002142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002146:	3501      	adds	r5, #1
 8002148:	e7c1      	b.n	80020ce <_printf_common+0x46>
 800214a:	2030      	movs	r0, #48	; 0x30
 800214c:	18e1      	adds	r1, r4, r3
 800214e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002158:	4422      	add	r2, r4
 800215a:	3302      	adds	r3, #2
 800215c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002160:	e7c3      	b.n	80020ea <_printf_common+0x62>
 8002162:	2301      	movs	r3, #1
 8002164:	4622      	mov	r2, r4
 8002166:	4639      	mov	r1, r7
 8002168:	4630      	mov	r0, r6
 800216a:	47c0      	blx	r8
 800216c:	3001      	adds	r0, #1
 800216e:	d0e6      	beq.n	800213e <_printf_common+0xb6>
 8002170:	f109 0901 	add.w	r9, r9, #1
 8002174:	e7d7      	b.n	8002126 <_printf_common+0x9e>
	...

08002178 <_printf_i>:
 8002178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800217c:	4617      	mov	r7, r2
 800217e:	7e0a      	ldrb	r2, [r1, #24]
 8002180:	b085      	sub	sp, #20
 8002182:	2a6e      	cmp	r2, #110	; 0x6e
 8002184:	4698      	mov	r8, r3
 8002186:	4606      	mov	r6, r0
 8002188:	460c      	mov	r4, r1
 800218a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800218c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002190:	f000 80bc 	beq.w	800230c <_printf_i+0x194>
 8002194:	d81a      	bhi.n	80021cc <_printf_i+0x54>
 8002196:	2a63      	cmp	r2, #99	; 0x63
 8002198:	d02e      	beq.n	80021f8 <_printf_i+0x80>
 800219a:	d80a      	bhi.n	80021b2 <_printf_i+0x3a>
 800219c:	2a00      	cmp	r2, #0
 800219e:	f000 80c8 	beq.w	8002332 <_printf_i+0x1ba>
 80021a2:	2a58      	cmp	r2, #88	; 0x58
 80021a4:	f000 808a 	beq.w	80022bc <_printf_i+0x144>
 80021a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80021b0:	e02a      	b.n	8002208 <_printf_i+0x90>
 80021b2:	2a64      	cmp	r2, #100	; 0x64
 80021b4:	d001      	beq.n	80021ba <_printf_i+0x42>
 80021b6:	2a69      	cmp	r2, #105	; 0x69
 80021b8:	d1f6      	bne.n	80021a8 <_printf_i+0x30>
 80021ba:	6821      	ldr	r1, [r4, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80021c2:	d023      	beq.n	800220c <_printf_i+0x94>
 80021c4:	1d11      	adds	r1, r2, #4
 80021c6:	6019      	str	r1, [r3, #0]
 80021c8:	6813      	ldr	r3, [r2, #0]
 80021ca:	e027      	b.n	800221c <_printf_i+0xa4>
 80021cc:	2a73      	cmp	r2, #115	; 0x73
 80021ce:	f000 80b4 	beq.w	800233a <_printf_i+0x1c2>
 80021d2:	d808      	bhi.n	80021e6 <_printf_i+0x6e>
 80021d4:	2a6f      	cmp	r2, #111	; 0x6f
 80021d6:	d02a      	beq.n	800222e <_printf_i+0xb6>
 80021d8:	2a70      	cmp	r2, #112	; 0x70
 80021da:	d1e5      	bne.n	80021a8 <_printf_i+0x30>
 80021dc:	680a      	ldr	r2, [r1, #0]
 80021de:	f042 0220 	orr.w	r2, r2, #32
 80021e2:	600a      	str	r2, [r1, #0]
 80021e4:	e003      	b.n	80021ee <_printf_i+0x76>
 80021e6:	2a75      	cmp	r2, #117	; 0x75
 80021e8:	d021      	beq.n	800222e <_printf_i+0xb6>
 80021ea:	2a78      	cmp	r2, #120	; 0x78
 80021ec:	d1dc      	bne.n	80021a8 <_printf_i+0x30>
 80021ee:	2278      	movs	r2, #120	; 0x78
 80021f0:	496f      	ldr	r1, [pc, #444]	; (80023b0 <_printf_i+0x238>)
 80021f2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80021f6:	e064      	b.n	80022c2 <_printf_i+0x14a>
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80021fe:	1d11      	adds	r1, r2, #4
 8002200:	6019      	str	r1, [r3, #0]
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002208:	2301      	movs	r3, #1
 800220a:	e0a3      	b.n	8002354 <_printf_i+0x1dc>
 800220c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002210:	f102 0104 	add.w	r1, r2, #4
 8002214:	6019      	str	r1, [r3, #0]
 8002216:	d0d7      	beq.n	80021c8 <_printf_i+0x50>
 8002218:	f9b2 3000 	ldrsh.w	r3, [r2]
 800221c:	2b00      	cmp	r3, #0
 800221e:	da03      	bge.n	8002228 <_printf_i+0xb0>
 8002220:	222d      	movs	r2, #45	; 0x2d
 8002222:	425b      	negs	r3, r3
 8002224:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002228:	4962      	ldr	r1, [pc, #392]	; (80023b4 <_printf_i+0x23c>)
 800222a:	220a      	movs	r2, #10
 800222c:	e017      	b.n	800225e <_printf_i+0xe6>
 800222e:	6820      	ldr	r0, [r4, #0]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002236:	d003      	beq.n	8002240 <_printf_i+0xc8>
 8002238:	1d08      	adds	r0, r1, #4
 800223a:	6018      	str	r0, [r3, #0]
 800223c:	680b      	ldr	r3, [r1, #0]
 800223e:	e006      	b.n	800224e <_printf_i+0xd6>
 8002240:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002244:	f101 0004 	add.w	r0, r1, #4
 8002248:	6018      	str	r0, [r3, #0]
 800224a:	d0f7      	beq.n	800223c <_printf_i+0xc4>
 800224c:	880b      	ldrh	r3, [r1, #0]
 800224e:	2a6f      	cmp	r2, #111	; 0x6f
 8002250:	bf14      	ite	ne
 8002252:	220a      	movne	r2, #10
 8002254:	2208      	moveq	r2, #8
 8002256:	4957      	ldr	r1, [pc, #348]	; (80023b4 <_printf_i+0x23c>)
 8002258:	2000      	movs	r0, #0
 800225a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800225e:	6865      	ldr	r5, [r4, #4]
 8002260:	2d00      	cmp	r5, #0
 8002262:	60a5      	str	r5, [r4, #8]
 8002264:	f2c0 809c 	blt.w	80023a0 <_printf_i+0x228>
 8002268:	6820      	ldr	r0, [r4, #0]
 800226a:	f020 0004 	bic.w	r0, r0, #4
 800226e:	6020      	str	r0, [r4, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d13f      	bne.n	80022f4 <_printf_i+0x17c>
 8002274:	2d00      	cmp	r5, #0
 8002276:	f040 8095 	bne.w	80023a4 <_printf_i+0x22c>
 800227a:	4675      	mov	r5, lr
 800227c:	2a08      	cmp	r2, #8
 800227e:	d10b      	bne.n	8002298 <_printf_i+0x120>
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	07da      	lsls	r2, r3, #31
 8002284:	d508      	bpl.n	8002298 <_printf_i+0x120>
 8002286:	6923      	ldr	r3, [r4, #16]
 8002288:	6862      	ldr	r2, [r4, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	bfde      	ittt	le
 800228e:	2330      	movle	r3, #48	; 0x30
 8002290:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002294:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002298:	ebae 0305 	sub.w	r3, lr, r5
 800229c:	6123      	str	r3, [r4, #16]
 800229e:	f8cd 8000 	str.w	r8, [sp]
 80022a2:	463b      	mov	r3, r7
 80022a4:	aa03      	add	r2, sp, #12
 80022a6:	4621      	mov	r1, r4
 80022a8:	4630      	mov	r0, r6
 80022aa:	f7ff feed 	bl	8002088 <_printf_common>
 80022ae:	3001      	adds	r0, #1
 80022b0:	d155      	bne.n	800235e <_printf_i+0x1e6>
 80022b2:	f04f 30ff 	mov.w	r0, #4294967295
 80022b6:	b005      	add	sp, #20
 80022b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80022c0:	493c      	ldr	r1, [pc, #240]	; (80023b4 <_printf_i+0x23c>)
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022ca:	f100 0504 	add.w	r5, r0, #4
 80022ce:	601d      	str	r5, [r3, #0]
 80022d0:	d001      	beq.n	80022d6 <_printf_i+0x15e>
 80022d2:	6803      	ldr	r3, [r0, #0]
 80022d4:	e002      	b.n	80022dc <_printf_i+0x164>
 80022d6:	0655      	lsls	r5, r2, #25
 80022d8:	d5fb      	bpl.n	80022d2 <_printf_i+0x15a>
 80022da:	8803      	ldrh	r3, [r0, #0]
 80022dc:	07d0      	lsls	r0, r2, #31
 80022de:	bf44      	itt	mi
 80022e0:	f042 0220 	orrmi.w	r2, r2, #32
 80022e4:	6022      	strmi	r2, [r4, #0]
 80022e6:	b91b      	cbnz	r3, 80022f0 <_printf_i+0x178>
 80022e8:	6822      	ldr	r2, [r4, #0]
 80022ea:	f022 0220 	bic.w	r2, r2, #32
 80022ee:	6022      	str	r2, [r4, #0]
 80022f0:	2210      	movs	r2, #16
 80022f2:	e7b1      	b.n	8002258 <_printf_i+0xe0>
 80022f4:	4675      	mov	r5, lr
 80022f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80022fa:	fb02 3310 	mls	r3, r2, r0, r3
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002304:	4603      	mov	r3, r0
 8002306:	2800      	cmp	r0, #0
 8002308:	d1f5      	bne.n	80022f6 <_printf_i+0x17e>
 800230a:	e7b7      	b.n	800227c <_printf_i+0x104>
 800230c:	6808      	ldr	r0, [r1, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002314:	6949      	ldr	r1, [r1, #20]
 8002316:	d004      	beq.n	8002322 <_printf_i+0x1aa>
 8002318:	1d10      	adds	r0, r2, #4
 800231a:	6018      	str	r0, [r3, #0]
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	6019      	str	r1, [r3, #0]
 8002320:	e007      	b.n	8002332 <_printf_i+0x1ba>
 8002322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002326:	f102 0004 	add.w	r0, r2, #4
 800232a:	6018      	str	r0, [r3, #0]
 800232c:	6813      	ldr	r3, [r2, #0]
 800232e:	d0f6      	beq.n	800231e <_printf_i+0x1a6>
 8002330:	8019      	strh	r1, [r3, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	4675      	mov	r5, lr
 8002336:	6123      	str	r3, [r4, #16]
 8002338:	e7b1      	b.n	800229e <_printf_i+0x126>
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	1d11      	adds	r1, r2, #4
 800233e:	6019      	str	r1, [r3, #0]
 8002340:	6815      	ldr	r5, [r2, #0]
 8002342:	2100      	movs	r1, #0
 8002344:	6862      	ldr	r2, [r4, #4]
 8002346:	4628      	mov	r0, r5
 8002348:	f000 f836 	bl	80023b8 <memchr>
 800234c:	b108      	cbz	r0, 8002352 <_printf_i+0x1da>
 800234e:	1b40      	subs	r0, r0, r5
 8002350:	6060      	str	r0, [r4, #4]
 8002352:	6863      	ldr	r3, [r4, #4]
 8002354:	6123      	str	r3, [r4, #16]
 8002356:	2300      	movs	r3, #0
 8002358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800235c:	e79f      	b.n	800229e <_printf_i+0x126>
 800235e:	6923      	ldr	r3, [r4, #16]
 8002360:	462a      	mov	r2, r5
 8002362:	4639      	mov	r1, r7
 8002364:	4630      	mov	r0, r6
 8002366:	47c0      	blx	r8
 8002368:	3001      	adds	r0, #1
 800236a:	d0a2      	beq.n	80022b2 <_printf_i+0x13a>
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	079b      	lsls	r3, r3, #30
 8002370:	d507      	bpl.n	8002382 <_printf_i+0x20a>
 8002372:	2500      	movs	r5, #0
 8002374:	f104 0919 	add.w	r9, r4, #25
 8002378:	68e3      	ldr	r3, [r4, #12]
 800237a:	9a03      	ldr	r2, [sp, #12]
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	429d      	cmp	r5, r3
 8002380:	db05      	blt.n	800238e <_printf_i+0x216>
 8002382:	68e0      	ldr	r0, [r4, #12]
 8002384:	9b03      	ldr	r3, [sp, #12]
 8002386:	4298      	cmp	r0, r3
 8002388:	bfb8      	it	lt
 800238a:	4618      	movlt	r0, r3
 800238c:	e793      	b.n	80022b6 <_printf_i+0x13e>
 800238e:	2301      	movs	r3, #1
 8002390:	464a      	mov	r2, r9
 8002392:	4639      	mov	r1, r7
 8002394:	4630      	mov	r0, r6
 8002396:	47c0      	blx	r8
 8002398:	3001      	adds	r0, #1
 800239a:	d08a      	beq.n	80022b2 <_printf_i+0x13a>
 800239c:	3501      	adds	r5, #1
 800239e:	e7eb      	b.n	8002378 <_printf_i+0x200>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1a7      	bne.n	80022f4 <_printf_i+0x17c>
 80023a4:	780b      	ldrb	r3, [r1, #0]
 80023a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023ae:	e765      	b.n	800227c <_printf_i+0x104>
 80023b0:	080026a1 	.word	0x080026a1
 80023b4:	08002690 	.word	0x08002690

080023b8 <memchr>:
 80023b8:	b510      	push	{r4, lr}
 80023ba:	b2c9      	uxtb	r1, r1
 80023bc:	4402      	add	r2, r0
 80023be:	4290      	cmp	r0, r2
 80023c0:	4603      	mov	r3, r0
 80023c2:	d101      	bne.n	80023c8 <memchr+0x10>
 80023c4:	2000      	movs	r0, #0
 80023c6:	bd10      	pop	{r4, pc}
 80023c8:	781c      	ldrb	r4, [r3, #0]
 80023ca:	3001      	adds	r0, #1
 80023cc:	428c      	cmp	r4, r1
 80023ce:	d1f6      	bne.n	80023be <memchr+0x6>
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd10      	pop	{r4, pc}

080023d4 <memcpy>:
 80023d4:	b510      	push	{r4, lr}
 80023d6:	1e43      	subs	r3, r0, #1
 80023d8:	440a      	add	r2, r1
 80023da:	4291      	cmp	r1, r2
 80023dc:	d100      	bne.n	80023e0 <memcpy+0xc>
 80023de:	bd10      	pop	{r4, pc}
 80023e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023e8:	e7f7      	b.n	80023da <memcpy+0x6>

080023ea <memmove>:
 80023ea:	4288      	cmp	r0, r1
 80023ec:	b510      	push	{r4, lr}
 80023ee:	eb01 0302 	add.w	r3, r1, r2
 80023f2:	d803      	bhi.n	80023fc <memmove+0x12>
 80023f4:	1e42      	subs	r2, r0, #1
 80023f6:	4299      	cmp	r1, r3
 80023f8:	d10c      	bne.n	8002414 <memmove+0x2a>
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	4298      	cmp	r0, r3
 80023fe:	d2f9      	bcs.n	80023f4 <memmove+0xa>
 8002400:	1881      	adds	r1, r0, r2
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	42d3      	cmn	r3, r2
 8002406:	d100      	bne.n	800240a <memmove+0x20>
 8002408:	bd10      	pop	{r4, pc}
 800240a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800240e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002412:	e7f7      	b.n	8002404 <memmove+0x1a>
 8002414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002418:	f802 4f01 	strb.w	r4, [r2, #1]!
 800241c:	e7eb      	b.n	80023f6 <memmove+0xc>
	...

08002420 <_free_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4605      	mov	r5, r0
 8002424:	2900      	cmp	r1, #0
 8002426:	d043      	beq.n	80024b0 <_free_r+0x90>
 8002428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800242c:	1f0c      	subs	r4, r1, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	bfb8      	it	lt
 8002432:	18e4      	addlt	r4, r4, r3
 8002434:	f000 f8d4 	bl	80025e0 <__malloc_lock>
 8002438:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <_free_r+0x94>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	4610      	mov	r0, r2
 800243e:	b933      	cbnz	r3, 800244e <_free_r+0x2e>
 8002440:	6063      	str	r3, [r4, #4]
 8002442:	6014      	str	r4, [r2, #0]
 8002444:	4628      	mov	r0, r5
 8002446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800244a:	f000 b8ca 	b.w	80025e2 <__malloc_unlock>
 800244e:	42a3      	cmp	r3, r4
 8002450:	d90b      	bls.n	800246a <_free_r+0x4a>
 8002452:	6821      	ldr	r1, [r4, #0]
 8002454:	1862      	adds	r2, r4, r1
 8002456:	4293      	cmp	r3, r2
 8002458:	bf01      	itttt	eq
 800245a:	681a      	ldreq	r2, [r3, #0]
 800245c:	685b      	ldreq	r3, [r3, #4]
 800245e:	1852      	addeq	r2, r2, r1
 8002460:	6022      	streq	r2, [r4, #0]
 8002462:	6063      	str	r3, [r4, #4]
 8002464:	6004      	str	r4, [r0, #0]
 8002466:	e7ed      	b.n	8002444 <_free_r+0x24>
 8002468:	4613      	mov	r3, r2
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	b10a      	cbz	r2, 8002472 <_free_r+0x52>
 800246e:	42a2      	cmp	r2, r4
 8002470:	d9fa      	bls.n	8002468 <_free_r+0x48>
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	1858      	adds	r0, r3, r1
 8002476:	42a0      	cmp	r0, r4
 8002478:	d10b      	bne.n	8002492 <_free_r+0x72>
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	4401      	add	r1, r0
 800247e:	1858      	adds	r0, r3, r1
 8002480:	4282      	cmp	r2, r0
 8002482:	6019      	str	r1, [r3, #0]
 8002484:	d1de      	bne.n	8002444 <_free_r+0x24>
 8002486:	6810      	ldr	r0, [r2, #0]
 8002488:	6852      	ldr	r2, [r2, #4]
 800248a:	4401      	add	r1, r0
 800248c:	6019      	str	r1, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	e7d8      	b.n	8002444 <_free_r+0x24>
 8002492:	d902      	bls.n	800249a <_free_r+0x7a>
 8002494:	230c      	movs	r3, #12
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	e7d4      	b.n	8002444 <_free_r+0x24>
 800249a:	6820      	ldr	r0, [r4, #0]
 800249c:	1821      	adds	r1, r4, r0
 800249e:	428a      	cmp	r2, r1
 80024a0:	bf01      	itttt	eq
 80024a2:	6811      	ldreq	r1, [r2, #0]
 80024a4:	6852      	ldreq	r2, [r2, #4]
 80024a6:	1809      	addeq	r1, r1, r0
 80024a8:	6021      	streq	r1, [r4, #0]
 80024aa:	6062      	str	r2, [r4, #4]
 80024ac:	605c      	str	r4, [r3, #4]
 80024ae:	e7c9      	b.n	8002444 <_free_r+0x24>
 80024b0:	bd38      	pop	{r3, r4, r5, pc}
 80024b2:	bf00      	nop
 80024b4:	200000a0 	.word	0x200000a0

080024b8 <_malloc_r>:
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	1ccd      	adds	r5, r1, #3
 80024bc:	f025 0503 	bic.w	r5, r5, #3
 80024c0:	3508      	adds	r5, #8
 80024c2:	2d0c      	cmp	r5, #12
 80024c4:	bf38      	it	cc
 80024c6:	250c      	movcc	r5, #12
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	4606      	mov	r6, r0
 80024cc:	db01      	blt.n	80024d2 <_malloc_r+0x1a>
 80024ce:	42a9      	cmp	r1, r5
 80024d0:	d903      	bls.n	80024da <_malloc_r+0x22>
 80024d2:	230c      	movs	r3, #12
 80024d4:	6033      	str	r3, [r6, #0]
 80024d6:	2000      	movs	r0, #0
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
 80024da:	f000 f881 	bl	80025e0 <__malloc_lock>
 80024de:	4a23      	ldr	r2, [pc, #140]	; (800256c <_malloc_r+0xb4>)
 80024e0:	6814      	ldr	r4, [r2, #0]
 80024e2:	4621      	mov	r1, r4
 80024e4:	b991      	cbnz	r1, 800250c <_malloc_r+0x54>
 80024e6:	4c22      	ldr	r4, [pc, #136]	; (8002570 <_malloc_r+0xb8>)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	b91b      	cbnz	r3, 80024f4 <_malloc_r+0x3c>
 80024ec:	4630      	mov	r0, r6
 80024ee:	f000 f867 	bl	80025c0 <_sbrk_r>
 80024f2:	6020      	str	r0, [r4, #0]
 80024f4:	4629      	mov	r1, r5
 80024f6:	4630      	mov	r0, r6
 80024f8:	f000 f862 	bl	80025c0 <_sbrk_r>
 80024fc:	1c43      	adds	r3, r0, #1
 80024fe:	d126      	bne.n	800254e <_malloc_r+0x96>
 8002500:	230c      	movs	r3, #12
 8002502:	4630      	mov	r0, r6
 8002504:	6033      	str	r3, [r6, #0]
 8002506:	f000 f86c 	bl	80025e2 <__malloc_unlock>
 800250a:	e7e4      	b.n	80024d6 <_malloc_r+0x1e>
 800250c:	680b      	ldr	r3, [r1, #0]
 800250e:	1b5b      	subs	r3, r3, r5
 8002510:	d41a      	bmi.n	8002548 <_malloc_r+0x90>
 8002512:	2b0b      	cmp	r3, #11
 8002514:	d90f      	bls.n	8002536 <_malloc_r+0x7e>
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	18cc      	adds	r4, r1, r3
 800251a:	50cd      	str	r5, [r1, r3]
 800251c:	4630      	mov	r0, r6
 800251e:	f000 f860 	bl	80025e2 <__malloc_unlock>
 8002522:	f104 000b 	add.w	r0, r4, #11
 8002526:	1d23      	adds	r3, r4, #4
 8002528:	f020 0007 	bic.w	r0, r0, #7
 800252c:	1ac3      	subs	r3, r0, r3
 800252e:	d01b      	beq.n	8002568 <_malloc_r+0xb0>
 8002530:	425a      	negs	r2, r3
 8002532:	50e2      	str	r2, [r4, r3]
 8002534:	bd70      	pop	{r4, r5, r6, pc}
 8002536:	428c      	cmp	r4, r1
 8002538:	bf0b      	itete	eq
 800253a:	6863      	ldreq	r3, [r4, #4]
 800253c:	684b      	ldrne	r3, [r1, #4]
 800253e:	6013      	streq	r3, [r2, #0]
 8002540:	6063      	strne	r3, [r4, #4]
 8002542:	bf18      	it	ne
 8002544:	460c      	movne	r4, r1
 8002546:	e7e9      	b.n	800251c <_malloc_r+0x64>
 8002548:	460c      	mov	r4, r1
 800254a:	6849      	ldr	r1, [r1, #4]
 800254c:	e7ca      	b.n	80024e4 <_malloc_r+0x2c>
 800254e:	1cc4      	adds	r4, r0, #3
 8002550:	f024 0403 	bic.w	r4, r4, #3
 8002554:	42a0      	cmp	r0, r4
 8002556:	d005      	beq.n	8002564 <_malloc_r+0xac>
 8002558:	1a21      	subs	r1, r4, r0
 800255a:	4630      	mov	r0, r6
 800255c:	f000 f830 	bl	80025c0 <_sbrk_r>
 8002560:	3001      	adds	r0, #1
 8002562:	d0cd      	beq.n	8002500 <_malloc_r+0x48>
 8002564:	6025      	str	r5, [r4, #0]
 8002566:	e7d9      	b.n	800251c <_malloc_r+0x64>
 8002568:	bd70      	pop	{r4, r5, r6, pc}
 800256a:	bf00      	nop
 800256c:	200000a0 	.word	0x200000a0
 8002570:	200000a4 	.word	0x200000a4

08002574 <_realloc_r>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	4607      	mov	r7, r0
 8002578:	4614      	mov	r4, r2
 800257a:	460e      	mov	r6, r1
 800257c:	b921      	cbnz	r1, 8002588 <_realloc_r+0x14>
 800257e:	4611      	mov	r1, r2
 8002580:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002584:	f7ff bf98 	b.w	80024b8 <_malloc_r>
 8002588:	b922      	cbnz	r2, 8002594 <_realloc_r+0x20>
 800258a:	f7ff ff49 	bl	8002420 <_free_r>
 800258e:	4625      	mov	r5, r4
 8002590:	4628      	mov	r0, r5
 8002592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002594:	f000 f826 	bl	80025e4 <_malloc_usable_size_r>
 8002598:	4284      	cmp	r4, r0
 800259a:	d90f      	bls.n	80025bc <_realloc_r+0x48>
 800259c:	4621      	mov	r1, r4
 800259e:	4638      	mov	r0, r7
 80025a0:	f7ff ff8a 	bl	80024b8 <_malloc_r>
 80025a4:	4605      	mov	r5, r0
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d0f2      	beq.n	8002590 <_realloc_r+0x1c>
 80025aa:	4631      	mov	r1, r6
 80025ac:	4622      	mov	r2, r4
 80025ae:	f7ff ff11 	bl	80023d4 <memcpy>
 80025b2:	4631      	mov	r1, r6
 80025b4:	4638      	mov	r0, r7
 80025b6:	f7ff ff33 	bl	8002420 <_free_r>
 80025ba:	e7e9      	b.n	8002590 <_realloc_r+0x1c>
 80025bc:	4635      	mov	r5, r6
 80025be:	e7e7      	b.n	8002590 <_realloc_r+0x1c>

080025c0 <_sbrk_r>:
 80025c0:	b538      	push	{r3, r4, r5, lr}
 80025c2:	2300      	movs	r3, #0
 80025c4:	4c05      	ldr	r4, [pc, #20]	; (80025dc <_sbrk_r+0x1c>)
 80025c6:	4605      	mov	r5, r0
 80025c8:	4608      	mov	r0, r1
 80025ca:	6023      	str	r3, [r4, #0]
 80025cc:	f7fe f936 	bl	800083c <_sbrk>
 80025d0:	1c43      	adds	r3, r0, #1
 80025d2:	d102      	bne.n	80025da <_sbrk_r+0x1a>
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	b103      	cbz	r3, 80025da <_sbrk_r+0x1a>
 80025d8:	602b      	str	r3, [r5, #0]
 80025da:	bd38      	pop	{r3, r4, r5, pc}
 80025dc:	2000025c 	.word	0x2000025c

080025e0 <__malloc_lock>:
 80025e0:	4770      	bx	lr

080025e2 <__malloc_unlock>:
 80025e2:	4770      	bx	lr

080025e4 <_malloc_usable_size_r>:
 80025e4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80025e8:	2800      	cmp	r0, #0
 80025ea:	f1a0 0004 	sub.w	r0, r0, #4
 80025ee:	bfbc      	itt	lt
 80025f0:	580b      	ldrlt	r3, [r1, r0]
 80025f2:	18c0      	addlt	r0, r0, r3
 80025f4:	4770      	bx	lr
	...

080025f8 <_init>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	bf00      	nop
 80025fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fe:	bc08      	pop	{r3}
 8002600:	469e      	mov	lr, r3
 8002602:	4770      	bx	lr

08002604 <_fini>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	bf00      	nop
 8002608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260a:	bc08      	pop	{r3}
 800260c:	469e      	mov	lr, r3
 800260e:	4770      	bx	lr
